grammar kismet_initialization;


init:
 (initialization|initialize|default)+ EOF
 ;

name : NAME;
NAME   : [a-z][a-zA-Z_]* ;
var : VAR;
VAR : [A-Z][a-zA-Z_!]*;

comparator:  '=' |
	    '==' |
	    '<' |
	    '>' |
	    '<='|
	    '>='|
	    '!=';

num_range:
	'[' num ']' | 
	'[' num ':' num ']' ( pdf )? ;

num_choice
	:  '[' num ']' (name|var) |
	'[' num ':' num ']' ( pdf )? (name|var) ;
pdf :  ('^'|'-'|'.'|'_')+ ;

num: NUMBER;

NUMBER : NEG? POSITIVE_NUMBER ;

pos_num: POSITIVE_NUMBER;

POSITIVE_NUMBER: [0-9]+('.' [0-9]+)?;
NEG: '-';

WS : [ \t\r\n]+ -> skip ;

LINE_COMMENT
    : '//' ~[\r\n]* -> skip
;


random_text: RANDOM_TEXT;

RANDOM_TEXT:'"' .*? '"'  ;

initialization:
	'initialization' name ':' let? (create|select) (';' (create|select))* '.';

let:
	'let' (assignment|deferred_assignment) (',' (assignment|deferred_assignment))* ';';
	
create:
	'create' num_choice  ('as' name)? (options|':')?;
    
select:
	'select' num_choice  ('as' name)? (options|':')? (conditions)?;
	
options:
	':' option (',' option)*;

conditions:
	(',')? ':' 'where' option (',' option)*;
    
default:
	'default' name (options|':')? '.';
	
	
option:
	assignment |
	description;

assignment:
	(name|var) '=' num_range|
	(name|var) '=' num_choice ('+' num_choice)* |
	(name|var) '=' var |
	(name|var) '=' random_text;

deferred_assignment:
    var '=' name '\'s' name |
    var '=' name '.' name;
    
negative:
    'not' |
    'is' 'not' |
    'isnt' |
    'isn\'t';
    
description:
	negative name |
	negative name ('to'|'of'|'with'|'at') (name|var) |
	'is' name |
	'is' name '=' num_range |
	'is' name ('to'|'of'|'with'|'at') name |
	name name |
	name 'is' name |
    'has' name 'of' name |
    name name '=' num_range |
	'is' name ('to'|'of'|'with') name '=' num_range;
	
	
initialize:
	'initialize' ':' create (';' create)* '.';