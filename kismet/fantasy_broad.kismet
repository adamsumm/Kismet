
time year: ?[1000:1100] season: [winter|spring|summer|fall]* .


location docks:
    supports: [1:2]  foreman,
        [4:6] dockworker,
        [1:2] prostitute ,
        [1:2] fisher,
        [3:4] visitor;
    each_turn:
        cast visitor.
location auction_house:
	supports:
		[3] curator,
		[2] auctioneer,
        [4:5] patron;
	each_turn:
		cast patron.
location ballroom:
	supports:
		[10:15] guest,
		[1] owner,
		[3] artist;
	each_turn:
		cast guest.
location quad:
	supports:
		[20:30] visitor;
	each_turn:
		cast visitor.
location mine:
	supports:
		[8] miner,
		[1] foreman.
location elders_house:
	supports:
		[1] elder,
        [4:5] visitor;
	each_turn:
		cast visitor.
location dungeon:
	supports:
		[3] guard,
		[1] prisoner.
location opera_house:
	supports:
		[2] diva,
		[17] tourist,
		[5] bard,
        [4:5] patron;
	each_turn:
		cast patron.
location smith:
	supports:
		[2] smith_apprentice,
		[1] smithy,
        [4:5] patron;
	each_turn:
		cast patron.
location boat:
	supports:
		[6] sailor,
		[1] captain,
        [4:5] passenger;
	each_turn:
		cast passenger.
location thieves_den:
	supports:
		[3] spy,
		[5] thief,
		[1] spy_master,
		[1] master_thief.
        
location library:
	supports:
		[3] librarian,
		[1] tutor,
		[14] student,
		[3] researcher,
        [4:5] visitor;
	each_turn:
		cast visitor.
        
location kitchen:
	supports:
		[9] guest,
		[2] chef,
		[3] worker,
		[1] owner.
location amphitheatre:
	supports:
		[10:20] tourist,
		[5] bard;
	each_turn:
		cast tourist.
location shipyard:
	supports:
		[1] owner,
		[2] engineer,
		[4] ship_builder,
        [4:5] visitor;
	each_turn:
		cast visitor.
location ruins:
	supports:
		[3] archaelogist,
		[3] treasure_hunter,
        [4:5] visitor;
	each_turn:
		cast visitor.
location temple:
	supports:
		[3] priest,
		[10:20] follower,
		[8] monk,
		[1] high_priest,
        [4:5] parishioner;
	each_turn:
		cast parishioner.
location marketplace:
	supports:
		[6] vendor,
		[3] enforcer,
		[2] pickpocket,
		[1] racketeer,
        [4:5] patron;
	each_turn:
		cast patron.
location tavern:
	supports:
		[6] regular,
		[1] owner,
		[3] barkeep,
        [4:5] patron;
	each_turn:
		cast patron.
location classroom:
	supports:
		[14] student,
		[3] professor,
		[2] dean.
location garden:
	supports:
		[10] guest,
		[4] gardener,
		[1] owner,
        [4:5] visitor;
	each_turn:
		cast visitor.
  
trait introvert(>Self) opposes extrovert:
    ---(talk).
    
trait skeptic(>Self) opposes believer:
    ---(religious).
  
trait curious(>Self) opposes cautious:
    +++(risky).
    
trait scholar(>Self) opposes ignoramus:
    +++(scholarly).
    
trait conscientious(>Self) opposes careless:
    +++(thoughtful),
    ---(careless).
    
trait agreeable(>Self) opposes critical:
    +++(agree),
    ---(critical).
  
trait compassionate(>Self) opposes indifferent:
    +++(thoughtful),
    +++(kind).
    
trait neurotic(>Self) opposes confident:
    +++(worry),
    ---(bold).

trait family_oriented(>Self, <Other):
    +++(thoughtful if Self is related_to Other),
    +++(kind if Self is related_to Other),
    ---(mean if Self is related_to Other).

trait duty_bound(>Self) opposes free_spirited:
    +++(duty),
    ---(free).

trait romantic(>Self):
    +++(romance).

trait gruff(>Self,<Other):
    +++(critical),
    +++(agree if Self likes Other).

trait feral(>Self):
    ----(talk),
    +++(risky),
    --(religious).

trait comic(>Self) opposes stern:
    +++(silly),
    -(thoughtful).
    
//DEFAULT TRAITS


default trait stay_in_confinement(>Self,@Location):
    ++++++@if Self is confined of Location@.
    
default trait visiting_places_you_like(>Self,@Location):
      +@if Self is tourist of Location@.
      
default trait visiting_as_regular(>Self,@Location):
      +++@if Self is regular of Location@.
      
      
default trait stay_at_hometown(>Self,@Location):
      +++@if Self's hometown == Location's hometown@.
      
default trait family_ties(>Self, <Other):
    +(thoughtful if Self is related_to Other),
    +(kind if Self is related_to Other),
    -(mean if Self is related_to Other),
    +(critical if Self is related_to Other),
    -----(romance if Self is related_to Other).
    
    
//RELATIONSHIP SCALARS
status scalar likes/like/liked(>Self,<Other):.
status scalar loves/love/loved(>Self,<Other):.
status scalar respect_towards(>Self,<Other):.
status scalar rivalry(>Self,<Other):.

//RELATIONSHIPS
status dissapointed_in/disappointed_with(>Self,<Other):.
status proud_of(>Self,<Other):.
status embarrassed_by(>Self,<Other):.
status protective_of(>Self,<Other):.
status friends_with(>Self, <Other):.


//SELF WORTH
status scalar guilt(>Self):.
status scalar shame(>Self):.
status scalar self_worth(>Self):.



action chit_chat(>Self, <Other):
    tags: talk;
    result: Self and Other like each other += 1.
