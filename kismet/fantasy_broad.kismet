
time year: ?[1000:1100] season: [winter|spring|summer|fall]* .


location docks:
    supports: [1:2]  foreman,
        [4:6] dockworker,
        [1:2] prostitute ,
        [1:2] fisher,
        [3:4] visitor;
    each_turn:
        cast visitor.
        
location auction_house:
	supports:
		[3] curator,
		[2] auctioneer,
        [4:5] patron;
	each_turn:
		cast patron.
location ballroom:
	supports:
		[10:15] guest,
		[1] owner,
		[3] artist;
	each_turn:
		cast guest.
location quad:
	supports:
		[20:30] visitor;
	each_turn:
		cast visitor.
location mine:
	supports:
		[8] miner,
		[1] foreman.
location elders_house:
	supports:
		[1] elder,
        [4:5] visitor;
	each_turn:
		cast visitor.
location dungeon:
	supports:
		[3] guard,
		[1] prisoner.
location opera_house:
	supports:
		[2] diva,
		[17] tourist,
		[5] bard,
        [4:5] patron;
	each_turn:
		cast patron.
location smith:
	supports:
		[2] smith_apprentice,
		[1] smithy,
        [4:5] patron;
	each_turn:
		cast patron.
location boat:
	supports:
		[6] sailor,
		[1] captain,
        [4:5] passenger;
	each_turn:
		cast passenger.
location thieves_den:
	supports:
		[3] spy,
		[5] thief,
		[1] spy_master,
		[1] master_thief.
        
location library:
	supports:
		[3] librarian,
		[1] tutor,
		[14] student,
		[3] researcher,
        [4:5] visitor;
	each_turn:
		cast visitor.
        
location kitchen:
	supports:
		[9] guest,
		[2] chef,
		[3] worker,
		[1] owner.
location amphitheatre:
	supports:
		[10:20] tourist,
		[5] bard;
	each_turn:
		cast tourist.
location shipyard:
	supports:
		[1] owner,
		[2] engineer,
		[4] ship_builder,
        [4:5] visitor;
	each_turn:
		cast visitor.
location ruins:
	supports:
		[3] archaelogist,
		[3] treasure_hunter,
        [4:5] visitor;
	each_turn:
		cast visitor.
location temple:
	supports:
		[3] priest,
		[10:20] follower,
		[8] monk,
		[1] high_priest,
        [4:5] parishioner;
	each_turn:
		cast parishioner.
location marketplace:
	supports:
		[6] vendor,
		[3] enforcer,
		[2] pickpocket,
		[1] racketeer,
        [4:5] patron;
	each_turn:
		cast patron.
location tavern:
	supports:
		[6] regular,
		[1] owner,
		[3] barkeep,
        [4:5] patron;
	each_turn:
		cast patron.
location classroom:
	supports:
		[14] student,
		[3] professor,
		[2] dean.
location garden:
	supports:
		[10] guest,
		[4] gardener,
		[1] owner,
        [4:5] visitor;
	each_turn:
		cast visitor.
  
trait introvert(>Self) opposes extrovert:
    ---(talk).
  
trait curious(>Self) opposes cautious:
    +++(risky).

trait bully(>Self) opposes carer:
    +++(mean),
    ---(kind).

trait scholar(>Self) opposes ignoramus:
    +++(scholarly).
    
trait conscientious(>Self) opposes careless:
    +++(thoughtful),
    ---(careless).
    
trait agreeable(>Self) opposes critical:
    +++(agree),
    ---(critical).
  
trait compassionate(>Self) opposes indifferent:
    +++(thoughtful),
    +++(kind).
    
trait neurotic(>Self) opposes confident:
    +++(worry),
    ---(bold).

trait family_oriented(>Self, <Other):
    +++(thoughtful if Self is related_to Other),
    +++(kind if Self is related_to Other),
    ---(mean if Self is related_to Other).

trait duty_bound(>Self) opposes free_spirited:
    +++(duty),
    ---(free).

trait romantic(>Self):
    +++(romance).

trait gruff(>Self,<Other):
    +++(critical),
    +++(agree if Self likes Other).

trait feral(>Self):
    ----(talk),
    +++(risky),
    --(religious).

trait comic(>Self) opposes stern:
    +++(silly),
    -(thoughtful).
    
//DEFAULT TRAITS

default trait do_more_specific_things(>Self):
    +++(specific).

default trait stay_in_confinement(>Self,@Location):
    ++++++@if Self is confined of Location@.
    
default trait visiting_places_you_like(>Self,@Location):
      +@if Self is tourist of Location@.
      
default trait visiting_as_regular(>Self,@Location):
      +++@if Self is regular of Location@.

default trait romantic_towards_crush(>Self, <Other):
    +++(romance if Self crushing_on Other).
      
default trait stay_at_hometown(>Self,@Location):
      +++@if Self's hometown == Location's hometown@.
      
default trait family_ties(>Self, <Other):
    +(thoughtful if Self is related_to Other),
    +(kind if Self is related_to Other),
    -(mean if Self is related_to Other),
    +(critical if Self is related_to Other),
    -----(romance if Self is related_to Other).

default trait mean_to_people_you_dislike1(>Self, <Other):
    +(mean if Self likes Other <= -1).
    
default trait mean_to_people_you_dislike2(>Self, <Other):
    ++(mean if Self likes Other <= -3).
    
default trait mean_to_people_you_dislike3(>Self, <Other):
    +++(mean if Self likes Other <= -5).
    
default trait nice_to_people_you_like1(>Self, <Other):
    -(mean if Self likes Other >= 1).
    
default trait mean_to_people_you_dislike2(>Self, <Other):
    --(mean if Self likes Other >= 3).
    
default trait mean_to_people_you_dislike3(>Self, <Other):
    ---(mean if Self likes Other >= 5).

default trait people_are_usually_serious(>Self):
    -(silly).

default trait people_joke_with_joker(>Self, <Other):
    +(silly if Other is comic).

//RELATIONSHIP SCALARS
status scalar likes/like/liked(>Self,<Other):.
status scalar loves/love/loved(>Self,<Other):.
status scalar respect_towards(>Self,<Other):.
status scalar rivalry(>Self,<Other):.

//RELATIONSHIPS
status dissapointed_in/disappointed_with(>Self,<Other):.
status proud_of(>Self,<Other):.
status embarrassed_by(>Self,<Other):.
status protective_of(>Self,<Other):.
status friends_with(>Self, <Other):.


//SELF WORTH
status scalar guilt(>Self):.
status scalar shame(>Self):.
status scalar self_worth(>Self):.



action chit_chat(>Self, <Other):
    tags: talk;
    result: Self and Other like each other += 1.
    
    
action complain_to_and_make_annoyed(>Self, <Other):
    tags: talk, critical;
    if Other is not compassionate;
    result: Self likes Other +=1,
        Other like Self -= 1.

action complain_to_compassionate(>Self, <Other):
    tags: talk, critical;
    if Other is not compassionate;
    result: Self and Other like each other += 1,
            Self's self_worth += 1,
            Other's self_worth += 1.

action flirt_at(>Self, <Other):
    tags: talk, romance;
    result: Self loves Other +=1,
        Other likes Self -= 1.
        
action flirt_with(>Self, <Other):
    tags: talk, romance;
    result: Self and Other love each other += 1,
            Self and Other like each other += 1.

action use_humor_to_spark_love(>Self, <Other):
    tags: talk, silly, romance;
    result: Other is crushing_on Self,
            Self and Other love each other += 1,
            Self and Other like each other += 1.

action be_open_about_crush(>Self, <Other):
    tags: romance, bold, specific;
    if Self is crushing_on Other,
       Other loves Self >= 1;
   result:
       Self and Other love each other += 2,
       Self and Other like each other += 2.

action be_open_about_crush_and_burn(>Self, <Other):
    tags: romance, bold, specific;
    if Self is crushing_on Other,
       Other loves Self <= 0;
   result:
       Self doesn't have crushing_on Other,
       Self's self_worth -= 2.
       
action develop_crush(>Self,<Other):
    tags: romance;
    result: Self is crushing_on Other.

action pine_over(>Self,<Other):
    tags: romance;
    result: Self loves Other += 1.
    

action make_out_with(>Self, <Other):
    tags:  romance;
    if Self love Other >= 3, 
		Other love Self >= 3;
    result: Self and Other love each other += 1,
            Self and Other like each other += 1.

action blow_up_love_triangle(>Self, <Other, ^ThirdWheel):
    tags: talk, romance, angry;
    if Self love Other >= 3, 
 Other love Self >= 3,
       Other love ThirdWheel >= 3, 
 ThirdWheel love Other >= 3;
    result: Self and Other love each other -= 5,
            Self and Other like each other -= 5,
            Self and ThirdWheel like each other -= 5,
            Self and ThirdWheel love each other -= 5.

action plot_about_sabotaging_romantic_rival(>Self, <Other, ^ThirdWheel):
    location: ?(Self, Other, ThirdWheel);
    tags: talk, romance, angry;
    if 
        Self love Other >= 3, 
        Other love Self >= 3,
        Other love ThirdWheel >= 3, 
        ThirdWheel love Other >= 3;
    result: Self likes ThirdWheel -= 2,
            Self loves ThirdWheel -= 2.

action reject_romance(>Self, <Other):
    tags: talk;
    if Other loves Self >= 5,
       Self likes Other <= 0;
    result: Other loves Self -= 5,
            Other likes Self -= 5,
            Other's shame += 1,
            Other's self_worth -=1.

action insult_as_bully(>Self, <Other):
    tags: talk, mean,specific;
    if Self is bully;
    result: Self's self_worth += 1,
        Other likes Self -= 3.
                
action insult(>Self, <Other):
    tags: talk, mean;
    if Self is not bully;
    result: Self's self_worth -= 1,
        Other likes Self -= 3.

action sulk(>Self):
    tags: worry;
    if Self's self_worth <= -3.

action have_catharsis(>Self):
    tags: thoughtful;
    if Self's self_worth <= -3;
    result: Self's self_worth += 1.

action try_to_help_struggling_friend(>Self, <Other):
    tags: thoughtful;
    if Other's self_worth <= -3,
        Self likes Other >= 3,
        Other likes Self >= 3;
    result: Self and Other like each other += 1.
    
action help_struggling_friend(>Self, <Other):
    tags: kind, thoughtful,specific;
    if Other's self_worth <= -3,
        Self like Other >= 3, 
		Other like Self >= 3;
    result: Self and Other like each other += 1,
            Self's self_worth += 1.

action help_really_struggling_person(>Self, <Other):
    tags: kind, thoughtful;
    if Other's self_worth <= -5;
    result: Self and Other like each other += 1,
            Self's self_worth += 1.

action joke_around_with(>Self, <Other):
    tags: talk, silly;
    result: Self and Other like each other += 2.
    
action joke_around_with_the_wrong_person(>Self, <Other):
    tags: talk, silly,specific;
    if pattern(non_joker,Other);
    result: Other likes Self -= 2.

action criticize(>Self, <Other):
    tags: talk, critical;
    result: Other likes Self -= 1.
    
action provide_critical_feedback(>Self, <Other):
    tags: talk, critical,specific;
    if Other is agreeable;
    result: Self and Other like each other += 1.

action get_into_argument(>Self, <Other):
    tags: talk, critical;
    if Self likes Other <= -1,
        Other likes Self <= -1;
    result: Self and Other like each other -= 1. 

action stand_up_for_friend_and_persuade(>Self, <Other,^Friend):
    location: (Self, Other) ?(Friend);
    tags: talk, bold;
    if pattern(dislikes_friend,Self,Other,Friend);
    result: 
        Friend likes Self += 1,
        Self's self_worth += 1,
        Disliker likes Friend += 1,
        Disliker likes Self += 1.
        
action stand_up_for_friend_and_fail(>Self, <Other,^Friend):
    location: (Self, Other) ?(Friend);
    tags: talk, bold;
    if pattern(dislikes_friend,Self,Other,Friend);
    result: 
        Friend likes Self += 1,
        Self's self_worth += 1,
        Disliker likes Friend -= 1,
        Disliker likes Self -= 1.
        
pattern dislikes_friend(>Self, <Disliker, ^Friend):
    if Self likes Friend >= 3,
        Disliker likes Friend <= -3.

pattern non_joker(>Character):
    if Character is critical.
pattern non_joker(>Character):
    if Character is stern.
pattern non_joker(>Character):
    if Character is gruff.
    

    