
time year: ?[1000:1100] season: [winter|spring|summer|fall]* .

   
//DEFAULT TRAITS
default trait rare_things_rare(>Self):
    ---(rare).
default trait xrare_things_xrare(>Self):
    -----(extremely_rare).

default trait do_more_specific_things(>Self):
    +++(specific).

default trait stay_in_confinement(>Self,@Location):
    ++++++@if Self is confined of Location@.
    
default trait visiting_places_you_like(>Self,@Location):
      +@if Self is tourist of Location@.
      
default trait visiting_as_regular(>Self,@Location):
      +++@if Self is regular of Location@.

default trait thieves_go_around(>Self,@Location):
      ---@if Self is thief of Location@.
      
default trait spies_go_around(>Self,@Location):
      ---@if Self is spy of Location@.
      
default trait knights_go_around(>Self,@Location):
      ---@if Self is knight of Location@.
      
default trait guards_go_around(>Self,@Location):
      ---@if Self is guard of Location@.
      
default trait squires_go_around(>Self,@Location):
      ---@if Self is squire of Location@.
      
default trait romantic_towards_crush(>Self, <Other):
    +++(romance if Self crushing_on Other).
      
default trait stay_at_hometown(>Self,@Location):
      +++@if Self's hometown == Location's hometown@.

default trait make_chosen_one_connections_occurLACKING(>Self, <Other, @Location):
    +++@if pattern(lacking_path, Self, Other),  Other is connected of Location@.

default trait make_chosen_one_connections_occur(>Self, <Other, @Location):
    +@if Self is chosen_one, Other is chosen_one, Other is connected of Location@.

default trait go_where_people_you_like_go(>Self, <Other, @Location):
    ++@if Self likes Other >= 1, Other is connected of Location@.


default trait chosen_ones_are_connected(>Self, <Other):
    +++(if pattern(lacking_path, Self, Other)).

default trait do_role_specific_actions(>Self):
    ++++(role_specific).
    
default trait go_to_locations_you_have_connection_with(>Self,@Location):
    ++++@if Self is connected of Location @.
    
default trait clique_formation1(>Self, <Other):
    ++(if Self likes Other >= 0).
    
default trait clique_formation2(>Self, <Other):
    ++(if Self likes Other <= 0).


default trait clique_formationFoF1(>Self, <Other):
    ++(if pattern(friend_of_friend,Self,Other)).
    
default trait clique_formationFoF2(>Self, <Other):
    ++(if pattern(friend_of_friend,Other,Self)).
    
    
default trait clique_formation1R(>Self, <Other):
    ++(if Other likes Self >= 0).
    
default trait clique_formation2R(>Self, <Other):
    ++(if Other likes Self <= 0).
    
default trait no_pedophilia(>Self, <Other):
    ------------------------------(romance if Self's age >= 18, Other's age <= 17).
    
default trait family_ties(>Self, <Other):
    +(thoughtful if Self is related_to Other),
    +(kind if Self is related_to Other),
    -(mean if Self is related_to Other),
    +(critical if Self is related_to Other),
    -------(romance if Self is related_to Other, Self is not spouse Other).

default trait abusive_if_abusive(>Self, <Other):
    +++(mean if Self's abusiveness >= 0),
    +++(abusive if Self's abusivenss >= 0).

default trait mean_to_people_you_dislike1(>Self, <Other):
    +(mean if Self likes Other <= -1).
    
default trait mean_to_people_you_dislike2(>Self, <Other):
    ++(mean if Self likes Other <= -3).
    
default trait mean_to_people_you_dislike3(>Self, <Other):
    +++(mean if Self likes Other <= -5).
    
default trait nice_to_people_you_like1(>Self, <Other):
    -(mean if Self likes Other >= 1).
    
default trait mean_to_people_you_dislike2(>Self, <Other):
    --(mean if Self likes Other >= 3).
    
default trait mean_to_people_you_dislike3(>Self, <Other):
    ---(mean if Self likes Other >= 5).

default trait people_are_usually_serious(>Self):
    -(silly).
    
default trait fail_when_interactin_with_person_who_dislikes_you1(>Self, <Other):
    +(failure if Other likes Self <= -1).
    
default trait fail_when_interactin_with_person_who_dislikes_you2(>Self, <Other):
    ++(failure if Other likes Self <= -3).

default trait people_joke_with_joker(>Self, <Other):
    +(silly if Other is comic).

  
trait introvert(>Self) opposes extrovert:
    ---(talk).
  
trait curious(>Self) opposes cautious:
    +++(risky).

trait bully(>Self) opposes carer:
    +++(mean),
    ---(kind).

trait scholar(>Self) opposes ignoramus:
    +++(scholarly).
    
trait conscientious(>Self) opposes careless:
    +++(thoughtful),
    ---(careless).
    
trait agreeable(>Self) opposes critical:
    +++(agree),
    ---(critical).
  
trait compassionate(>Self) opposes indifferent:
    +++(thoughtful),
    +++(kind),
    ---(mean).
    
trait neurotic(>Self) opposes confident:
    +++(worry),
    ---(bold).

trait family_oriented(>Self, <Other):
    +++(thoughtful if Self is related_to Other),
    +++(kind if Self is related_to Other),
    ---(mean if Self is related_to Other).

trait duty_bound(>Self) opposes free_spirited:
    +++(duty),
    ---(free).

trait romantic(>Self):
    +++(romance).

trait gruff(>Self,<Other):
    +++(critical),
    +++(agree if Self likes Other).

trait feral(>Self):
    ----(talk),
    +++(risky),
    --(religious).

trait comic(>Self) opposes stern:
    +++(silly),
    -(thoughtful).
 
//RELATIONSHIP SCALARS
status scalar likes/like/liked(>Self,<Other):.
status scalar loves/love/loved(>Self,<Other):.
status scalar respects/respect_towards(>Self,<Other):.
status scalar rivalry(>Self,<Other):.

//RELATIONSHIPS
status dissapointed_in/disappointed_with(>Self,<Other):.
status proud_of(>Self,<Other):.
status embarrassed_by(>Self,<Other):.
status protective_of(>Self,<Other):.
status friends_with(>Self, <Other):.


//SELF WORTH
status scalar abusiveness(>Self):.
status scalar happiness(>Self):.
status scalar anger(>Self):.
status scalar tiredness(>Self):.
status scalar sadness(>Self):.
status scalar guilt(>Self):.
status scalar shame(>Self):.
status scalar self_worth(>Self):.


role ur_job(>TheWorker):
	tags: work;
	if TheWorker missing ur_job.   
    

action chit_chat(>Self, <Other):
    tags: talk;
    result: Self and Other like each other += 1.
    
    
action complain_to_and_make_annoyed(>Self, <Other):
    tags: talk, critical, failure;
    if Other is not compassionate;
    result: Self likes Other +=1,
        Other like Self -= 1.

action complain_to_compassionate(>Self, <Other):
    tags: talk, critical;
    if Other is not compassionate;
    result: Self and Other like each other += 1,
            Self's self_worth += 1,
            Other's self_worth += 1.

action flirt_at(>Self, <Other):
    tags: talk, romance, failure;
    result: Self loves Other +=1,
        Other likes Self -= 1.
        
action flirt_with(>Self, <Other):
    tags: talk, romance;
    result: Self and Other love each other += 1,
            Self and Other like each other += 1.

action use_humor_to_spark_love(>Self, <Other):
    tags: talk, silly, romance;
    result: Other is crushing_on Self,
            Self and Other love each other += 1,
            Self and Other like each other += 1.

action be_open_about_crush(>Self, <Other):
    tags: romance, bold, specific;
    if Self is crushing_on Other,
       Other loves Self >= 1;
   result:
       Self and Other love each other += 2,
       Self and Other like each other += 2.

action be_open_about_crush_and_burn(>Self, <Other):
    tags: romance, bold, specific, failure;
    if Self is crushing_on Other,
       Other loves Self <= 0;
   result:
       Self doesn't have crushing_on Other,
       Self's self_worth -= 2.
       
action develop_crush(>Self,<Other):
    tags: romance;
    result: Self is crushing_on Other.

action pine_over(>Self,<Other):
    tags: romance;
    result: Self loves Other += 1.
    

action make_out_with(>Self, <Other):
    tags:  romance;
    if Self love Other >= 3, 
		Other love Self >= 3;
    result: Self and Other love each other += 1,
            Self and Other like each other += 1.

action blow_up_love_triangle(>Self, <Other, ^ThirdWheel):
    tags: talk, romance, angry;
    if Self love Other >= 3, 
 Other love Self >= 3,
       Other love ThirdWheel >= 3, 
 ThirdWheel love Other >= 3;
    result: Self and Other love each other -= 5,
            Self and Other like each other -= 5,
            Self and ThirdWheel like each other -= 5,
            Self and ThirdWheel love each other -= 5.

action plot_about_sabotaging_romantic_rival(>Self, <Other, ^ThirdWheel):
    location: ?(Self, Other, ThirdWheel);
    tags: talk, romance, angry;
    if 
        Self love Other >= 3, 
        Other love Self >= 3,
        Other love ThirdWheel >= 3, 
        ThirdWheel love Other >= 3;
    result: Self likes ThirdWheel -= 2,
            Self loves ThirdWheel -= 2.

action reject_romance(>Self, <Other):
    tags: talk;
    if Other loves Self >= 5,
       Self likes Other <= 0;
    result: Other loves Self -= 5,
            Other likes Self -= 5,
            Other's shame += 1,
            Other's self_worth -=1.

action insult_as_bully(>Self, <Other):
    tags: talk, mean,specific;
    if Self is bully;
    result: Self's self_worth += 1,
        Other likes Self -= 3.
                
action insult(>Self, <Other):
    tags: talk, mean;
    if Self is not bully;
    result: Self's self_worth -= 1,
        Other likes Self -= 3.

action sulk(>Self):
    tags: worry;
    if Self's self_worth <= -3.

action have_catharsis(>Self):
    tags: thoughtful;
    if Self's self_worth <= -3;
    result: Self's self_worth += 1.

action try_to_help_struggling_friend(>Self, <Other):
    tags: thoughtful;
    if Other's self_worth <= -3,
        Self likes Other >= 3,
        Other likes Self >= 3;
    result: Self and Other like each other += 1.
    
action help_struggling_friend(>Self, <Other):
    tags: kind, thoughtful,specific;
    if Other's self_worth <= -3,
        Self like Other >= 3, 
		Other like Self >= 3;
    result: Self and Other like each other += 1,
            Self's self_worth += 1.

action share_personal_info(>Self, <Other):
    tags: talk, bold, thoughtful;
    result: Self and Other like each other += 1,
            Other knows_personal_info_about Self.


action help_really_struggling_person(>Self, <Other):
    tags: kind, thoughtful;
    if Other's self_worth <= -5;
    result: Self and Other like each other += 1,
            Self's self_worth += 1.

action joke_around_with(>Self, <Other):
    tags: talk, silly;
    result: Self and Other like each other += 2.


action joke_around_with_the_wrong_person(>Self, <Other):
    tags: talk, silly,specific, failure;
    if pattern(non_joker,Other);
    result: Other likes Self -= 2.

action criticize(>Self, <Other):
    tags: talk, critical;
    result: Other likes Self -= 1.
    
action provide_critical_feedback(>Self, <Other):
    tags: talk, critical,specific;
    if Other is agreeable;
    result: Self and Other like each other += 1.

action get_into_argument(>Self, <Other):
    tags: talk, critical;
    if Self likes Other <= -1,
        Other likes Self <= -1;
    result: Self and Other like each other -= 1. 

action impress(>Self, <Other):
    tags: talk, bold;
    result: Self's self_worth += 1,
            Self and Other like each other += 1.
            
action try_to_impress_and_fail(>Self, <Other):
    tags: talk, bold, failure;
    result: Self's self_worth -= 1,
            Self and Other like each other -= 1.

action stand_up_for_friend_and_persuade(>Self, <Other,^Friend):
    location: (Self, Other) ?(Friend);
    tags: talk, bold;
    if pattern(dislikes_friend,Self,Other,Friend);
    result: 
        Friend likes Self += 1,
        Self's self_worth += 1,
        Other likes Friend += 1,
        Other likes Self += 1.
        
action stand_up_for_friend_and_fail(>Self, <Other,^Friend):
    location: (Self, Other) ?(Friend);
    tags: talk, bold, failure;
    if pattern(dislikes_friend,Self,Other,Friend);
    result: 
        Friend likes Self += 1,
        Self's self_worth += 1,
        Other likes Friend -= 1,
        Other likes Self -= 1.
        
pattern dislikes_friend(>Self, <Disliker, ^Friend):
    if Self likes Friend >= 3,
        Disliker likes Friend <= -3.

pattern non_joker(>Character):
    if Character is critical.
pattern non_joker(>Character):
    if Character is stern.
pattern non_joker(>Character):
    if Character is gruff.

////////////////////////////MONK

role monk(>Worker) extends ur_job(>Worker):
    tags: religious.

action pray(>Monk:monk):
    tags: religious, role_specific;
    result: Monk's devotion += 1.
    
action pray_with_follower(>Monk:monk, <Follower:follower):
    tags: religious, role_specific;
    result: Monk's devotion += 1, Follower's devotion += 1.
    
action perform_ritual(>Monk:monk, <Other:monk):
    tags: religious, role_specific;
    result: Monk's devotion += 2,
            Other's devotion += 2.
            
action screw_up_ritual(>Monk:monk, <Other:monk):
    tags: religious, failure, role_specific;
    result: Monk's devotion -= 1,
            Other's devotion -= 1,
            Other likes Monk -= 2.
            
action have_crisis_of_faith(>Monk:monk):
    tags: religious, worry, role_specific;
    result: Monk's devotion -=2,
            Monk's self_worth -=1.

////////////////////////////FOREMAN

role foreman(>Worker) extends ur_job(>Worker):
    tags: talk, critical.
          
action manage_mine(>Foreman:foreman):
    tags: work, role_specific.
    
action boss_miner_around(>Foreman:foreman, <Miner:miner):
    tags: work, critical, role_specific;
    result: Miner likes Foreman -= 1.
    
action manage_dispute_between_miners(>Foreman:foreman, <Miner:miner, ^Miner2:miner):
    tags: work, thoughtful, kind, role_specific;
    if Miner likes Miner2 <= -1,
        Miner2 likes Miner <= -1;
    result: Miner and Miner2 like each other += 1,
            Miner respects Foreman += 1,
            Miner2 respects Foreman += 1.
            
action endanger_miners(>Foreman:foreman, <Miner:miner, ^Miner2:miner):  
    tags: work, risky, role_specific;
    result: Miner likes Foreman -= 2,
            Miner2 likes Foreman -= 2,
            Miner respects Foreman -= 2,
            Miner2 respects Foreman -= 2.
    
action strike_motherlode(>Foreman:foreman, <Miner:miner, ^Miner2:miner):  
    tags: work, risky, rare, role_specific;
    result: Foreman's self_worth +=2,
            Miner likes Foreman += 2,
            Miner2 likes Foreman += 2,
            Miner respects Foreman += 2,
            Miner2 respects Foreman += 2.


////////////////////////////MINER

role miner(>Worker) extends ur_job(>Worker):
    tags: bold.
    
action work_at_mine(>Miner:miner):
    tags: work, role_specific;
    result: Miner's tiredness += 1.


////////////////////////////AUCTIONEER

      
action hold_auction(>Auctioneer:auctioneer, <P1:patron, ^P2:patron):
    tags: work, bold, talk, role_specific;   
    result: 
        P1's self_worth += 1,
        Auctioneer's self_worth += 1.
    
      
action discuss_collection(>Auctioneer:auctioneer, <Curator:curator):
    tags: work,  talk, thoughtful, role_specific;   
    result: 
        Auctioneer and Curator like each other += 1.

action demand_a_new_piece(>Auctioneer:auctioneer, <Curator:curator):
    tags: work,  talk, mean;   
    result: 
        Auctioneer and Curator like each other -=2.
        

////////////////////////////CURATOR

role curator(>Worker) extends ur_job(>Worker):
    tags: scholarly.
                     
action curate_collection(>Curator:curator):
    tags: work, role_specific.
    
action acquire_artifacts(>Curator:curator):
    tags: work, bold, role_specific;
    result: Curator's self_worth += 1.
    
action discuss_collection(>Curator:curator, <Other):
    tags: work, talk, role_specific;
    result: Other respects Curator += 1.
    
////////////////////////////VENDOR

role vendor(>Worker) extends ur_job(>Worker):
    tags: talk.
    
action sell_wares(>Vendor:vendor, <Other):
    tags: work, role_specific;
    result: Vendor likes Other += 1.
    
action give_deal_to(>Vendor:vendor, <Other):
    tags: work, kind, talk, role_specific;
    if Vendor likes Other >= 3;
    result: Other likes Vendor += 2.

action hustle(>Vendor: vendor, <Other):
    tags: work, bold, mean, risky, role_specific;
    if Vendor likes Other <= 0;
    result: Vendor's self_worth += 1,
            Other likes Vendor -= 1.

action commiserate_with_fellow_vendor(>Vendor:vendor, <OtherVendor:vendor):
    tags: work, talk, thoughtful, kind, role_specific;
    result: Vendor and OtherVendor like each other += 1.

action undercut(>Vendor:vendor, <Other:vendor):
    tags: work, bold, mean, role_specific;
    if Vendor likes Other <= 0;
    result: Vendor's self_worth += 1,
            Other likes Vendor -= 1.

action standup_to_enforcer_together(>Vendor:vendor, <OtherVendor:vendor, ^Enforcer):
    tags: work, bold, role_specific;
    if Vendor fears Enforcer >= 6,
        OtherVendor fears Enforcer >= 6;
    result: Vendor and OtherVendor like each other += 5,
        Vendor fears Enforcer -= 3,
        OtherVendor fears Enforcer -= 3,
        Enforcer likes Vendor -= 3,
        Enforcer likes OtherVendor -=3.
       

////////////////////////////ENFORCER

role enforcer(>Worker) extends ur_job(>Worker):
    tags: risky, mean, criminal.
    
action collect_protection_fees(>Enforcer:enforcer, <Vendor:vendor):
    tags: work, mean, risky, criminal, role_specific;
    result: Vendor likes Enforcer -= 1.

action rough_up(>Enforcer:enforcer, <Vendor:vendor):
    tags: work, mean, risky, criminal, role_specific;
    result: Vendor likes Enforcer -= 2,
            Vendor fears Enforcer += 2.


role dockworker(>Worker) extends ur_job(>Worker):
    tags: mariner.
    
action load_cargo(>Dockworker:dockworker):
    tags: work, role_specific;
    result: Dockworker's tiredness += 1.

action fight_seagull(>Dockworker:dockworker):
    tags: angry, rare, role_specific;
    result: Dockworker's anger += 1.
 
////////////////////////////LIBRARIAN

role librarian(>Worker) extends ur_job(>Worker):
    tags: scholarly.
    
action stock_books(>Librarian:librarian):
    tags: work, scholarly, role_specific;
    result: Librarian's tiredness += 1.
    
action shush_patron(>Librarian:librarian, <Patron:guest):
    tags: work, mean, bold, role_specific;
    result: Patron likes Librarian -= 1,
            Patron's shame += 1.
            
action assist_research(>Librarian:librarian, <Researcher:researcher):
    tags: work, scholarly, role_specific;
    result: Librarian and Researcher like each other += 1,
            Librarian's self_worth += 1.


action assist_research(>Librarian:librarian, <Researcher:guest):
    tags: work, scholarly, role_specific;
    if Researcher is scholar;
    result: Librarian and Researcher like each other += 1,
            Librarian's self_worth += 1.


action assist_student(>Librarian:librarian, <Researcher:student):
    tags: work, scholarly, role_specific;
    result: Librarian and Researcher like each other += 1,
            Librarian's self_worth += 1.
   

////////////////////////////CHEF

role chef(>Worker) extends ur_job(>Worker):
    tags: talk.  
    
action acquire_ingredients(>Chef, <ShopOwner:vendor):
    tags: work, role_specific;
    if Chef is chef;
    result: 
        Chef and ShopOwner like each other += 1.
        
action develop_recipe(>Chef:chef):
    tags: work, role_specific;
    result: Chef's self_worth += 1.
    
action boss_cooks_around(>Chef:chef,<Cook:worker):
    tags: work, mean, role_specific;
    result: 
    Cook likes Chef -= 1.

action mentor_cook(>Chef:chef,<Cook:worker):
    tags: work, kind, role_specific;
    result: 
    Cook likes Chef += 1.
    
action create_culinary_masterpiece(>Chef:chef,<Guest:guest):
    tags: work, rare, role_specific;
    result:
        Chef's self_worth += 2,
        Guest respects Chef += 3,
        Guest's happiness += 2.
        
//GENERIC EMPLOYEE STUFF
action bitch_about_boss(>Worker, <Coworker, ^Boss):
    location: (Worker,Coworker) ?(Boss);
    tags: work, mean, role_specific;
    if Worker is coworker of Coworker,
        Worker is employee of Boss;
    result: Worker and Coworker like each other +=1,
        Coworker likes Boss -= 1.
        
action bitch_about_boss_to_resistance(>Worker, <Coworker, ^Boss):
    location: (Worker,Coworker) ?(Boss);
    tags: work, mean, failure, role_specific;
    if Coworker likes Boss >= 3,
        Worker is coworker of Coworker,
        Worker is employee of Boss;
    result: Worker and Coworker like each other -=1.
        
action praise_boss(>Worker, <Coworker, ^Boss):
    location: (Worker,Coworker) ?(Boss);
    tags: work, kind, role_specific;
    if Worker likes Boss >= 3,
        Worker is coworker of Coworker,
        Worker is employee of Boss;
    result: Worker and Coworker like each other +=1,
        Coworker likes Boss += 1.
        
action praise_boss_to_resistance(>Worker, <Coworker, ^Boss):
    location: (Worker,Coworker) ?(Boss);
    tags: work, kind, role_specific;
    if Worker likes Boss >= 3,
        Coworker likes Boss <= -1,
        Worker is coworker of Coworker,
        Worker is employee of Boss;
    result: Worker and Coworker like each other -=1.


////////////////////////////TREASURE HUNTER

role treasure_hunter(>Worker) extends ur_job(>Worker):
    tags: bold, criminal, risky.
    
action search_for_treasure(>TreasureHunter:treasure_hunter):
    tags: work, bold, criminal, role_specific;
    result: TreasureHunter's tiredness += 1.
    
action find_treasure(>TreasureHunter:treasure_hunter):
    tags: work, bold, criminal, rare, role_specific;
    result: TreasureHunter's self_worth += 5,
            TreasureHunter is rich.
            
            
action investigate_ruins(>TreasureHunter:treasure_hunter):
    tags: work, scholarly, thoughtful, role_specific.
    
action trigger_trap(>TreasureHunter:treasure_hunter):
    tags: work, careless, role_specific;
    result: TreasureHunter's self_worth -= 1.
    
action sabotage_rival_treasure_hunter(>TreasureHunter:treasure_hunter,<OtherTH:treasure_hunter):
    tags: work, mean, bold, role_specific;
    if TreasureHunter is rival of OtherTH;
    result: 
        OtherTH likes TreasureHunter -= 1,
        OtherTH respects TreasureHunter += 1.
        
action overcome_rivalry_to_work_together(>TreasureHunter:treasure_hunter,<OtherTH:treasure_hunter):
    tags: work, kind, bold, role_specific;
    if TreasureHunter is rival of OtherTH;
    result: 
        TreasureHunter and OtherTH like each other += 1.


////////////////////////////ARCHAELOGIST

role archaelogist(>Worker) extends ur_job(>Worker):
    tags: scholarly, thoughtful.
    
action investigate_ruins(>Archaelogist:archaelogist):
    tags: work, scholarly, thoughtful, role_specific.

action catalog_findings(>Archaelogist:archaelogist):
    tags: work, scholarly, thoughtful, role_specific.
    
action argue_with_treasure_hunter(>Archaelogist:archaelogist, <TreasureHunter:treasure_hunter):
    tags: talk, critical, role_specific;
    if Archaelogist is rival of TreasureHunter;
    result: Archaelogist and TreasureHunter like each other -= 1.
    
action develop_begrudging_respect_towards(>Archaelogist:archaelogist, <TreasureHunter:treasure_hunter):
    tags: talk, kind, role_specific;
    if Archaelogist is rival of TreasureHunter;
    result: Archaelogist and TreasureHunter like each other += 1.
    


////////////////////////////BARD

role bard(>Worker) extends ur_job(>Worker):
    tags: talk, silly.
    
action perform_to_no_effect(>Bard:bard):
    tags: work, talk, role_specific;
    result: Bard's tiredness += 1.
    
action amuse_with_performance(>Bard:bard, <Tourist:tourist):
    tags: work, talk, role_specific;
    result: Bard's self_worth += 1,
            Tourist likes Bard += 1.

action grouse_backstage(>Bard:bard, <Other:bard):
    tags: work, criticial, role_specific;
    result: Bard and Other like each other -= 1.

action encourage_fellow_performer(>Bard:bard, <Other:bard):
    tags: work, kind;
    result: Bard and Other like each other += 1.

action annoy_diva_for_laughs(>Bard:bard, <Diva:diva, ^Other:bard):
    tags: work, mean, silly, role_specific;
    if Other likes Diva <= -1;
    result: Bard's self_worth += 1,
            Diva likes Bard -= 1,
            Bard and Other like each other += 1.

// Tourist

action become_annoyed_with_bard(>Tourist:tourist, <Bard:bard):
    tags: critical, role_specific;
    result: Tourist likes Bard -= 1.
    
action be_amused_by_bard(>Tourist:tourist, <Bard:bard):
    tags: silly, role_specific;
    result: Tourist likes Bard += 1.
    

////////////////////////////MONARCH

role monarch(>Worker) extends ur_job(>Worker):
    tags:  bold, critical.
    
action make_judicious_decree(>Monarch:monarch,<O1,^O2):
    tags: work, thoughtful, role_specific;
    if Monarch is monarch,
        O1 has fealty to Monarch,
       O2 has fealty to Monarch;
   result: O1 likes Monarch += 1,
           O2 likes Monarch += 1.
           
action make_imprudent_decree(>Monarch:monarch,<O1,^O2):
    tags: work, careless, role_specific;
    if Monarch is monarch,
        O1 has fealty to Monarch,
       O2 has fealty to Monarch;
   result: O1 likes Monarch -= 1,
           O2 likes Monarch -= 1.
    
           
action make_callous_decree(>Monarch:monarch,<O1,^O2):
    tags: work, mean, role_specific;
    if Monarch is monarch,
        O1 has fealty to Monarch,
       O2 has fealty to Monarch;
   result: O1 likes Monarch -= 1,
           O2 likes Monarch -= 1.
           
action make_benevolent_decree(>Monarch:monarch,<O1,^O2):
    tags: work, kind, role_specific;
    if Monarch is monarch,
        O1 has fealty to Monarch,
       O2 has fealty to Monarch;
   result: O1 likes Monarch += 1,
           O2 likes Monarch += 1.
           
action banish_monarchling(>Monarch:monarch, <Child):
    tags: mean, rare, role_specific;
    if Monarch is monarch,
        Monarch likes Child <= -5,
        Child is child of Monarch,
        Child's age >= 16,
        Child is royalty;
    result: Child is not royalty,
        Child is ex_royalty,
        Child is missing hometown,
        Child likes Monarch -= 10.

action consult_with_chancellor(>Monarch:monarch, <Chancellor:chancellor):
    tags: work, thoughtful, role_specific;
    result: Monarch and Chancellor like each other += 1.
 
////////////////////////////CHANCELLOR
role chancellor(>Worker) extends ur_job(>Worker):
    tags:  talk, critical.  
    
action sway_monarch_to_kindness(>Chancellor:chancellor, <Monarch:monarch):
    tags: kind, talk, bold, rare, role_specific;
    result: Monarch is compassionate,
            Monarch is not indifferent.
    
action sway_monarch_to_indifference(>Chancellor:chancellor, <Monarch:monarch):
    tags: mean, talk, bold, rare, role_specific;
    result: Monarch is not compassionate,
            Monarch is  indifferent.

action support_banished_sibling(>Monarchling, <ExMonarchling):
    tags: kind, free, role_specific;
    if Monarchling is royalty, ExMonarchling is ex_royalty, 
            Monarchling is sibling of ExMonarchling;
    result: Monarchling and ExMonarchling like each other +=1.
    
action shun_banished_sibling(>Monarchling, <ExMonarchling):
    tags: mean, duty, role_specific;
    if Monarchling is royalty, ExMonarchling is ex_royalty, 
            Monarchling is sibling of ExMonarchling;
    result: Monarchling and ExMonarchling like each other -=1.

// Childish things for Childlings
action play(>Child):
    tags: silly;
    if Child's age <= 15;
    result: Child's happiness += 1.
    
action play_together(>Child, <OtherChild):
    tags: silly, kind, talk;
    if Child's age <= 15,
        OtherChild's age <= 15;
    result: Child's happiness += 1,
        OtherChild's happiness += 1,
        Child and OtherChild like each other += 1.
        
action argue_with_playmate(>Child, <OtherChild):
    tags: critical, mean;
    if Child's age <= 15,
        OtherChild's age <= 15;
    result: Child's happiness -= 1,
        OtherChild's happiness -= 1,
        Child and OtherChild like each other -= 1.
            
// Adultish things
action worry_about_future(>Adult):
    tags: critical, worry;
    if Adult's age >= 35;
    result: Adult's tiredness += 1.
    
action worry_about_mortality(>Adult):
    tags: critical, worry;
    if Adult's age >= 55;
    result: Adult's tiredness += 1,
        Adult's happiness -= 1.
        
//Personality Clashes

action argue_about_duty(>Dutybound, <Free):
    tags: critical, role_specific;
    if Dutybound is duty_bound, Free is free_sprited;
    result: Dutybound and Free like each other -= 1.
    
action convince_importance_of_duty(>Dutybound, <Free):
    tags: thoughtful, role_specific;
    if Dutybound is duty_bound, Free is free_sprited;
    result: Dutybound and Free like each other += 1.
    
action argue_about_need_to_be_free(>Free, <Dutybound):
    tags: critical, role_specific;
    if Dutybound is duty_bound, Free is free_sprited;
    result: Dutybound and Free like each other -= 1.
    
action convince_importance_of_duty(>Free, <Dutybound):
    tags: thoughtful, role_specific;
    if Dutybound is duty_bound, Free is free_sprited;
    result: Dutybound and Free like each other += 1.
    
    
////////////////////////////PROFESSOR
role professor(>Worker) extends ur_job(>Worker):
    tags:  talk, scholarly, critical.  
    

action hold_lecture(>Professor:professor, <Student:student):
    tags: work, scholarly, role_specific;
    result:
        Student likes Professor += 1,
        Professor's self_worth += 1.


action hold_boring_lecture(>Professor:professor, <Student:student)
    "Professor holds a lecture that bores Student who grows to dislike Professor":
    tags: work, scholarly,failure, role_specific;
    result:
        Student likes Professor -= 1,
        Professor's self_worth -= 1.
        
action perform_research(>Professor:professor):
    tags: work, scholarly, role_specific;
    result:
        Professor's self_worth += 1.

    
////////////////////////////SPY MASTER
role spy_master(>Worker) extends ur_job(>Worker):
    tags:  risky, critical.
    
action conspire_against(>SpyMaster:spy_master, <Target):
    tags: rare, mean, role_specific;
    location: (SpyMaster) ?(Target);
    if Target is important;
    result: SpyMaster likes Target -= 1,
            SpyMaster is plotting_against Target = 3.
            
            
action send_underlings(>SpyMaster:spy_master, <Spy:spy, ^Target):
    tags: work, role_specific;
    location: (SpyMaster) ?(Target);
    if SpyMaster plotting_against Target >= 1;
    result: SpyMaster is plotting_against Target -= 1,
        Spy  is plotting_against Target = 1.
        
////////////////////////////sailor

role sailor(>Worker) extends ur_job(>Worker):
    tags:  physical.
    
action ready_the_ship(>Sailor:sailor):
    tags:  role_specific, work;
    result: Sailor's tiredness += 1.

action sing_shanty(>Sailor:sailor, <Other:sailor):
    tags:  role_specific, talk, bold;
    result: Sailor and Other like each other += 2,
            Sailor's happiness += 1,
            Other's happiness += 1.

////////////////////////////auctioneer


role auctioneer(>Worker) extends ur_job(>Worker):
    tags:  bold, talk.
    
action prepare_auction(>Auctioneer:auctioneer):
    tags:  role_specific, work;
    result:  Auctioneer's readiness += 1.

action prime_auction_goer(>Auctioneer:auctioneer, <Attendee):
    tags: role_specific, work, talk;
    if Attendee is rich;
    result: 
        Attendee likes Auctioneer += 1,
        Attendee's auction_readiness += 1,
        Auctioneer's readiness += 1.

action hold_auction_with_bidding_war(>Auctioneer:auctioneer, <Bidder1, ^Bidder2):
    tags: role_specific, work, talk, bold;
    if Bidder1's auction_readiness >= 1,
       Bidder2's auction_readiness >= 1,
       Auctioneer's readiness >= 5;
   result: 
       Auctioneer's readiness = 0,
       Bidder1's happiness += 5,
       Bidder2's happiness -= 5,
       Bidder1 and Bidder2 like each other -= 5.

action hold_auction_with_no_results(>Auctioneer:auctioneer, <Bidder1, ^Bidder2):
    tags: role_specific, work, talk, bold, failure;
    if Auctioneer's readiness >= 5;
   result: 
       Auctioneer's readiness = 0,
       Auctioneer's happiness -= 5.


////////////////////////////artist 

role artist(>Worker) extends ur_job(>Worker): 
tags:  creative  . 

action search_for_artistic_inspiration_at_location(>Self,@Location): 
tags: role_specific, work;
location: Location(Self);
if Self is artist;
result:
    Self is inspired with Location.

action find_muse(>Self, <Other): 
tags: role_specific, work;
if Self is artist;
result:
    Self is inspired with Other.
    
action produce_work_about_muse(>Self:artist,<Other):
    tags: role_specific, work;
    location: (Self) ?(Other);
    if Self is inspired with Other;
    result:
        Self's self_worth += 1,
        Self is has_art.
        
action produce_work_about_inspiration(>Self:artist,@Other):
    tags: role_specific, work;
    location: (Self);
    if Self is inspired with Other;
    result:
        Self's self_worth += 1,
        Self is has_art.
  
action lose_muse(>Self:artist,<Other):
    tags: role_specific, work, failure;
    location: (Self) ?(Other);
    if Self is inspired with Other;
    result:
        Self's self_worth -= 3,
        Self is not inspired with Other.
        
action lose_inspiration(>Self:artist,@Other):
    tags: role_specific, work, failure;
    location: (Self);
    if Self is inspired with Other;
    result:
        Self's self_worth -= 3,
        Self is not inspired with Other.

action discuss_art(>Self:artist,<Other):
    tags: role_specific, talk;
    if Self has_art;
    result:
        Self and Other like each other += 2.
    
action give_art_to_benefactor(>Self:artist,<Baron):
    tags: role_specific, talk;
    if Self has_art,
        Self is servant of Baron;
    result:
        Baron likes Self += 2.

////////////////////////////spy 

role spy(>Worker) extends ur_job(>Worker): 
tags:    work, criminal. 

action investigate_target(>Spy, ^Target): 
    tags: role_specific, work; 
    if Spy is spy,
        Spy is plotting_against Target >= 1;
    result: 
        Spy knows_personal_info_about Target.

action get_too_close_to_target(>Spy, ^Target): 
    tags: role_specific, talk, kind; 
    if Spy is spy,
        Spy is plotting_against Target >= 1;
    result: 
        Spy and Target like each other += 2.
        
action report_back(>Spy:spy, <Spymaster:spy_master, ^Target): 
    tags: role_specific, talk, kind;
    location: (Spy, Spymaster) (Target);
    if Spy knows_personal_info_about Target,
        Spy is plotting_against Target >= 1;
    result: 
        Spymaster knows_personal_info_about Target,
        Spymaster likes Spy += 1.

action turn_against_spymaster(>Spy, <Target, ^Spymaster ): 
    tags: role_specific, talk, kind; 
    location: (Spy, Target) (Spymaster);
    if Spy is spy,
        Spymaster is spy_master,
        Spy is plotting_against Target >= 1,
        Spy likes Target >= 5;
    result: 
        Spy is plotting_against Target -= 10,
        Spy likes Spymaster -= 10.

////////////////////////////mariner 
//TODO -- NOT SURE

////////////////////////////tutor 

role tutor(>Worker) extends ur_job(>Worker): 
tags: work, scholarly. 


action teach_student(>Tutor:tutor, <Student):
    tags: work, scholarly, role_specific;
    if Tutor is tutor to Student;
    result:
        Student likes Tutor += 1,
        Tutor's self_worth += 1.


action bore_student(>Tutor:tutor, <Student)
    "Tutor bores Student who grows to dislike Tutor":
    tags: work, scholarly,failure, role_specific;
    if Tutor is tutor to Student;
    result:
        Student likes Tutor -= 1,
        Tutor's self_worth -= 1.
        
////////////////////////////ship_builder 

role ship_builder(>Worker) extends ur_job(>Worker): 
        tags: work. 

action build_ship(>Self:ship_builder): 
    tags: role_specific, work; 
    result: Self's tiredness += 1.


action help_with_ship_building(>Self:ship_builder, <Other:ship_builder): 
    tags: role_specific, work, kind; 
    result: Self and Other like each other += 1.


action argue_with_engineer(>Self:ship_builder, <Other:engineer): 
    tags: role_specific, work, critical; 
    result: Self and Other like each other -= 1.


////////////////////////////prostitute 

role prostitute(>Worker) extends ur_job(>Worker): 
        tags: work. 

action entice_customer(>Self:prostitute, <Other): 
    tags: role_specific, work; 
    result: Other likes Self += 1.


////////////////////////////student 

role student(>Worker) extends ur_job(>Worker): 
    tags: work, scholarly. 

action attend_class(>Self:student): 
    tags: role_specific, scholarly; 
    result: Self's tiredness += 1.


action become_inspired_by_lecture(>Self:student, <Professor:professor): 
    tags: role_specific, scholarly; 
    result: Self likes Professor += 1,
            Self's self_worth += 1.
        
action bond_over_study(>Student1, <Student2):
    tags: role_specific, scholarly;
    if Student1 is student,
        Student2 is student;
    result: Student1 and Student2 like each other += 2.

action pull_all_nighter(>Student):
    tags: role_specific, scholarly;
    if Student1 is student;
    result: Student's tiredness += 3.

action hang_out_with_classmates_at_tavern(>Student1, <Student2):
    tags: role_specific, free;
    location: tavern(Student1, Student2);
    if Student1 is student,
        Student2 is student;
    result: Student1 and Student2 like each other += 2,
            Student1 is drunk,
            Student2 is drunk.

action have_fun_in_quad(>Student1, <Student2):
    tags: role_specific, silly;
    location: quad(Student1, Student2);
    if Student1 is student,
        Student2 is student;
    result: Student1 and Student2 like each other += 2,
            Student1's tiredness = 0,
            Student2's tiredness = 0.

action have_late_night_philosophical_argument(>Student1, <Student2):
    tags: role_specific, talk, critical;
    if Student1 is student,
        Student2 is student;
    result: Student1 and Student2 like each other -= 4.

////////////////////////////smith_apprentice 

role smith_apprentice(>Worker) extends ur_job(>Worker): 
        tags: work. 

action tend_the_forge(>Self:smith_apprentice): 
    tags: role_specific, work; 
    result: Self's tiredness += 1.

////////////////////////////guard 

role guard(>Worker) extends ur_job(>Worker): 
        tags: work. 

action guard_prison(>Self:guard): 
    tags: role_specific, work; 
    result: Self's tiredness += 1.

action sneak_treat_to_prisoner(>Self:guard, <Prisoner:prisoner): 
    tags: role_specific, work, kind; 
    result: Prisoner likes Self += 2.

action mistreat_prisoner(>Self:guard, <Prisoner:prisoner): 
    tags: role_specific, work, mean; 
    result: Prisoner likes Self -= 2.


////////////////////////////shipping_foreman 
role shipping_foreman(>Worker) extends ur_job(>Worker): 
    tags: work. 

action manage_docks(>Self:shipping_foreman): 
tags: role_specific, work; 
result: Self's tiredness += 1.


////////////////////////////thief 

role thief(>Worker) extends ur_job(>Worker): 
    tags: work. 

action steal_from_mark(>Self, <Mark): 
    tags: role_specific, work, criminal, bold; 
    if Mark is not criminal, Self is thief;
    result: Self's self_worth += 1,
            Mark's suspicion of Self += 1,
            Mark likes Self -= 1.

action get_caught_stealing(>Self, <Mark): 
    tags: role_specific, work, criminal, bold, failure;
    if Mark's suspicion of Self >= 2, Self is thief;
    result: Mark likes Self -= 5,
            Self's self_worth -=1,
            Self is on_the_run.
        
action run_from_authorities(>Self, <Authority):
    tags: role_specific, criminal;
    if Self is on_the_run,
       Authority is authority;
    result: Self and Authority like each other -= 2.

action evade_authorities(>Self):
    tags: role_specific, criminal;
    if Self is on_the_run;
    result: Self is not on_the_run.



////////////////////////////impresario 

role impresario(>Worker) extends ur_job(>Worker): 
    tags: work. 

action assuage_benefactor(>Self:impresario, <Patron:patron): 
    tags: role_specific, work, talk; 
    result: Self likes Patron -= 1,
            Patron likes Self += 1,
            Patron's self_worth += 1.
            
action assuage_diva(>Self:impresario, <Diva:diva): 
    tags: role_specific, work, talk; 
    result: Self likes Diva -= 1,
            Diva likes Self += 1,
            Diva's self_worth += 1.

action guide_cast_and_crew(>Self:impresario, <Bard:bad): 
    tags: role_specific, work, talk, kind; 
    result: Self and Bard like each other +=1.

action fend_off_diva_pursuer(>Self:impresario, <Diva:diva, ^Pursuer):
    tags: role_specific, kind;
    if Pursuer crushing_on Diva;
    result: Self and Pursuer like each other -= 5,
            Self and Diva like each other += 3,
            Pursuer is not crushing_on Diva.
            

////////////////////////////priest 

role priest(>Worker) extends ur_job(>Worker): 
        tags: work. 

action pray_with_follower(>Priest:priest, <Follower:follower):
    tags: religious, role_specific;
    result: Priest's devotion += 1, Follower's devotion += 1.
    
action lead_ritual(>Priest:priest, <Other:monk):
    tags: religious, role_specific;
    result: Priest's devotion += 2,
            Other's devotion += 2.

action rationalize_abuse_of_power(>Priest:priest):
    tags: religious, role_specific, mean;
    if Priest's devotion >= 8;
    result: Priest's abusiveness += 1.

////////////////////////////high_priest 

role high_priest(>Worker) extends ur_job(>Worker): 
    tags: work. 

action pray_with_follower(>Priest:high_priest, <Follower:follower):
    tags: religious, role_specific;
    result: Priest's devotion += 1, Follower's devotion += 1.
    
action lead_ritual(>Priest:high_priest, <Other:monk):
    tags: religious, role_specific;
    result: Priest's devotion += 2,
            Other's devotion += 2.

action rationalize_abuse_of_power(>Priest:high_priest):
    tags: religious, role_specific, mean;
    if Priest's devotion >= 8;
    result: Priest's abusiveness += 1.
    
////////////////////////////pickpocket 

role pickpocket(>Worker) extends ur_job(>Worker): 
        tags: work. 

action steal_from_mark(>Self:pickpocket, <Mark): 
    tags: role_specific, work, criminal, bold; 
    result: Self's self_worth += 1,
            Mark's suspicion of Self += 1.

action get_caught_stealing(>Self:pickpocket, <Mark): 
    tags: role_specific, work, criminal, bold, failure;
    if Mark's suspicion of Self >= 2;
    result: Mark likes Self -= 5,
            Self's self_worth -=1,
            Self is on_the_run.

////////////////////////////engineer 

role engineer(>Worker) extends ur_job(>Worker): 
    tags: work. 

action design_ship(>Self:engineer): 
    tags: role_specific, work; 
    result: Self's tiredness += 1, Self's self_worth += 1.

action guide_shipwrights(>Self:engineer, <ShipBuilder:ship_builder): 
    tags: role_specific, work, kind; 
    result: Self and ShipBuilder like each other += 1.

////////////////////////////captain 

role captain(>Worker) extends ur_job(>Worker): 
    tags: work. 

action inspire_crew(>Self:captain, <Sailor:sailor): 
tags: role_specific, work; 
result: Self's self_worth += 1,
        Sailor's self_worth += 1,
        Self and Sailor like each other += 2.

////////////////////////////elder 

role elder(>Worker) extends ur_job(>Worker): 
    tags: work. 

action provide_guidance(>Self:elder, <Other): 
    tags: role_specific, thoughtful; 
    result: Self and Other like each other += 2.

////////////////////////////fisher 

role fisher(>Worker) extends ur_job(>Worker): 
    tags: work. 

action fish(>Self:fisher): 
    tags: role_specific, work; 
    result: Self's tiredness += 1,
            Self's self_worth += 1.

action fight_seagull(>Self:fisher): 
    tags: angry, rare, role_specific;
    result: Self's anger += 1.


////////////////////////////master_thief 

role master_thief(>Worker) extends ur_job(>Worker): 
    tags: criminal. 

action command_underlings(>Self:master_thief, <Thief:thief): 
    tags: role_specific, criminal; 
    result: Self and Thief like each other += 1.

action consult_spymaster(>Self:master_thief, <SpyMaster:spy_master): 
    tags: role_specific, criminal, thoughtful; 
    result: Self and SpyMaster like each other += 1.


////////////////////////////patron 

role patron(>Worker): 
    tags: free. 

action patronize(>Self:patron): 
    tags: role_specific; 
    result: Self's happiness += 1.


action patronize_employee(>Self:patron, <Employee:employee): 
    tags: role_specific, mean; 
    result: Self's happiness += 1,
            Employee likes Self -= 2.

////////////////////////////smithy 

role smithy(>Worker) extends ur_job(>Worker): 
    tags: work. 

action work_the_forge(>Self:smithy): 
    tags: role_specific, work; 
    result: Self's tiredness += 1.


action craft_the_sacred_weapon(>Self:smithy): 
    tags: role_specific, work, extremely_rare;
    if Self is missing sacred_weapon;
    result: Self's self_worth += 5,
            Self has sacred_weapon,
            Self knows_sacred_weapon,
            Self is noteworthy.
            
action talk_about_sacred_weapon(>Talker,<Listener):
    tags: rare, talk, open;
    if Talker knows_sacred_weapon;
    result: Listener knows_sacred_weapon.
    
////////////////////////////researcher 

role researcher(>Worker) extends ur_job(>Worker): 
    tags: work, scholarly. 

action perform_research(>Self:researcher): 
    tags: role_specific, work, scholarly; 
    result: Self's tiredness += 1,
            Self's self_worth += 1.

action uncover_information_about_noteworthy_person(>Self:researcher,^Noteworthy): 
    tags: role_specific, work, scholarly, rare; 
    location: (Self) (Noteworthy);
    if Noteworthy is noteworthy;
    result: Self knows_personal_info_about Noteworthy.
    

action share_knowledge_about_noteworthy(>Self,<Listener,^Noteworthy):
    tags: specific, talk, free;
    location: (Self, Listener) (Noteworthy);
    if Self knows_personal_info_about Noteworthy,
       Noteworthy is noteworthy;
    result: Listener knows_personal_info_about Noteworthy,
            Self and Listener like each other += 1.
 

////////////////////////////diva 

role diva(>Worker) extends ur_job(>Worker): 
    tags: work, talk. 

action perform_for_tourist(>Self:diva, <Watcher:tourist): 
    tags: role_specific, talk; 
    result: Self's tiredness += 1,
            Self's self_worth += 1,
            Watcher likes Self += 2.


action perform_for_tourist(>Self:diva, <Watcher:tourist): 
    tags: role_specific, talk; 
    result: Self's tiredness += 1,
            Self's self_worth += 1,
            Watcher likes Self += 2.


action turn_fan_into_superfan(>Self:diva, <Watcher:tourist): 
    tags: role_specific, talk; 
    result: Watcher is crushing_on Self,
            Watcher likes Self += 2.

action turn_fan_into_superfan(>Self:diva, <Watcher:patron): 
    tags: role_specific, talk; 
    result: Watcher is crushing_on Self,
            Watcher likes Self += 2.

action belittle_other_performers(>Self:diva, <Performer:bard):
    tags: role_specific, mean;
    result: Self and Performer like each other -= 2.
    
action feud_with_diva(>Self:diva, <Other:diva):
    tags: role_specific, mean;
    result: Self and Other like each other -= 3.
    
action demand_more_of_impresario(>Self:diva, <Other:impresario):
    tags: role_specific, mean;
    result: Self likes Other += 1,
            Other like Self -= 1.

action deliver_stunning_perfomance(>Self:diva, <Patron:patron, ^Impresario:impresario):
    tags: role_specific, talk, rare;
    result: Patron likes Self += 5,
            Patron likes Impresario += 5,
            Impresario likes Self += 5,
            Self's self_worth += 5.
           

////////////////////////////barkeep

role barkeep(>Worker) extends ur_job(>Worker): 
    tags: work, talk. 
    
action serve_patron(>Barkeep:barkeep, <Patron:patron):
    tags: work, role_specific;
    result: Patron is drunk,
            Patron's tiredness = 0.
    
action chat_with_regular(>Barkeep:barkeep, <Regular:regular):
    tags: role_specific, talk;
    result: Regular is drunk,
            Regular and Barkeep like each other += 1.
            
action breakup_barfight(>Barkeep:barkeep,<Fighter1,^Fighter2):
    tags: role_specific,thoughtful;
    if Fighter1 is drunk,
        Fighter2 is drunk,
        Fighter1 likes Fighter2  <= -3,
        Fighter2 likes Fighter1 <= -3;
    result:
        Barkeep likes Fighter1 -= 3,
        Barkeep likes Fighter2 -= 3,
        Fighter1 and Fighter2 like each other -= 3.
        
action breakup_cathartic_barfight(>Barkeep:barkeep,<Fighter1,^Fighter2):
    tags: role_specific,thoughtful;
    if Fighter1 is drunk,
        Fighter2 is drunk,
        Fighter1 likes Fighter2  <= -3,
        Fighter2 likes Fighter1 <= -3;
    result:
        Barkeep and Fighter2 like each other += 3,
        Fighter1 and Barkeep like each other += 3,
        Fighter1 and Fighter2 like each other += 3.

action sober_up(>Drunk):
    tags: specific;
    if Drunk is drunk;
    result: Drunk isn't drunk.

pattern friend_of_friend(>PersonA, >PersonC):
    if PersonA likes PersonB >= 1, PersonB likes PersonC >= 1.
    
pattern has_connection(>PersonA, <PersonB):
    if PersonA likes PersonB >= 3, PersonA is chosen_one, PersonB is chosen_one.
    
pattern has_connection(>PersonA, <PersonB):
    if PersonA likes PersonB <= 3, PersonA is chosen_one, PersonB is chosen_one.

pattern has_connection(>PersonA, <PersonB):
    if PersonA loves PersonB <= 3,PersonA is chosen_one, PersonB is chosen_one.
    
pattern has_connection(>PersonA, <PersonB):
    if PersonA loves PersonB >= 3,PersonA is chosen_one, PersonB is chosen_one.
    
pattern has_connection(>PersonA, <PersonB):
    if pattern(has_connection,PersonB, PersonA), PersonA is chosen_one, PersonB is chosen_one .
    
pattern lacking_connection(>PersonA, <PersonB):
    if not pattern(has_connection, PersonA, PersonB), PersonA is chosen_one, PersonB is chosen_one.
  
pattern has_path(>PersonA, <PersonC):
    if pattern(has_connection,PersonA, PersonB), pattern(has_connection,PersonB, PersonC).
    
pattern has_path(>PersonA, <PersonC):
    if pattern(has_connection,PersonA, PersonB), pattern(has_path,PersonB, PersonC).
    
pattern has_path(>PersonA, <PersonC):
    if pattern(has_path,PersonA, PersonB), pattern(has_connection,PersonB, PersonC).
    
pattern has_path(>PersonA, <PersonC):
    if pattern(has_path,PersonA, PersonB), pattern(has_path,PersonB, PersonC).
    
pattern lacking_path(>PersonA, <PersonB):
    if not pattern(has_path,PersonA, PersonB), PersonA is chosen_one, PersonB is chosen_one.
////////////////////////////guest
////////////////////////////worker
////////////////////////////drinker
////////////////////////////scared
////////////////////////////vocation
////////////////////////////regular
////////////////////////////sibling
////////////////////////////spouse
////////////////////////////fealty
////////////////////////////rich
////////////////////////////citizen
////////////////////////////victim
////////////////////////////hometown
////////////////////////////confined
////////////////////////////owner
////////////////////////////important
////////////////////////////tourist
////////////////////////////rival
////////////////////////////parent
////////////////////////////criminal
////////////////////////////last_birthday
////////////////////////////coworker
////////////////////////////child
////////////////////////////boss
////////////////////////////royalty
////////////////////////////connected
        
 
location town:
    supports: [8] person;
    each_turn:
        cast person.

location house:
    supports: [4] resident,
              [2] guest;
    each_turn:
        cast guest.

location throne_room:
	supports:
		[1] monarch,
		[1] chancellor,
		[10] royalty,
        [10] citizen,
        [1] knight;
	each_turn:
		cast citizen.

location docks:
    supports: [1:2]  shipping_foreman,
        [4:6] dockworker,
        [1:2] prostitute ,
        [1:2] fisher,
        [3:4] visitor;
    each_turn:
        cast visitor.
        
location auction_house:
	supports:
		[3] curator,
		[2] auctioneer,
        [4:5] patron;
	each_turn:
		cast patron.
location ballroom:
	supports:
		[5] guest,
        [1] majordomo,
        [1] butler,
        [2] servant,
		[1] owner,
		[1] artist;
	each_turn:
		cast guest.
location quad:
	supports:
		[20:30] visitor;
	each_turn:
		cast visitor.
location mine:
	supports:
		[8] miner,
		[1] foreman,
        [1] visitor;
    each_turn:
        cast visitor.
location elders_house:
	supports:
		[1] elder,
        [4:5] visitor;
	each_turn:
		cast visitor.
location barracks:
	supports:
		[3] guard,
		[2] knight,
        [1] squire,
        [1] monarch,
        [3] monarchling,
        [1] visitor;
    each_turn:
        cast visitor.
location opera_house:
	supports:
        [1] impresario,
		[2] diva,
		[17] tourist,
		[5] bard,
        [4:5] patron;
	each_turn:
		cast patron.
location smith:
	supports:
		[2] smith_apprentice,
		[1] smithy,
        [4:5] patron;
	each_turn:
		cast patron.
location boat:
	supports:
		[6] sailor,
		[1] captain,
        [4:5] passenger;
	each_turn:
		cast passenger.
location thieves_den:
	supports:
		[3] spy,
		[5] thief,
		[1] spy_master,
		[1] master_thief.
        
location library:
	supports:
		[3] librarian,
		[1] tutor,
		[14] student,
		[3] researcher,
        [4:5] visitor;
	each_turn:
		cast visitor.
        
location kitchen:
	supports:
		[9] guest,
		[2] chef,
		[3] worker,
		[1] owner.
location amphitheatre:
	supports:
		[10:20] tourist,
		[5] bard;
	each_turn:
		cast tourist.
location shipyard:
	supports:
		[1] owner,
		[2] engineer,
		[4] ship_builder,
        [4:5] visitor;
	each_turn:
		cast visitor.
location ruins:
	supports:
		[3] archaelogist,
		[3] treasure_hunter,
        [4:5] visitor;
	each_turn:
		cast visitor.
location temple:
	supports:
		[3] priest,
		[10:20] follower,
		[8] monk,
		[1] high_priest,
        [4:5] parishioner;
	each_turn:
		cast parishioner.
location marketplace:
	supports:
		[6] vendor,
		[3] enforcer,
		[2] pickpocket,
		[1] racketeer,
        [4:5] patron;
	each_turn:
		cast patron.
location tavern:
	supports:
		[6] regular,
		[1] owner,
		[3] barkeep,
        [4:5] patron;
	each_turn:
		cast patron.
location classroom:
	supports:
		[14] student,
		[3] professor,
		[2] dean.
location garden:
	supports:
		[1] guest,
		[2] gardener,
		[1] owner,
        [1] majordomo,
        [1] butler,
        [2] servant,
        [1] visitor;
	each_turn:
		cast visitor.