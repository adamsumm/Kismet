# Generated from kismet_initialization.ebnf by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u0143\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3")
        buf.write("\5\3\6\3\6\3\6\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\n\3\n")
        buf.write("\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3#\3#\3#\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'")
        buf.write("\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3)\3)\7)\u0109\n")
        buf.write(")\f)\16)\u010c\13)\3*\3*\7*\u0110\n*\f*\16*\u0113\13*")
        buf.write("\3+\5+\u0116\n+\3+\3+\3,\6,\u011b\n,\r,\16,\u011c\3,\3")
        buf.write(",\6,\u0121\n,\r,\16,\u0122\5,\u0125\n,\3-\3-\3.\6.\u012a")
        buf.write("\n.\r.\16.\u012b\3.\3.\3/\3/\3/\3/\7/\u0134\n/\f/\16/")
        buf.write("\u0137\13/\3/\3/\3\60\3\60\7\60\u013d\n\60\f\60\16\60")
        buf.write("\u0140\13\60\3\60\3\60\3\u013e\2\61\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_")
        buf.write("\61\3\2\t\3\2c|\5\2C\\aac|\3\2C\\\6\2##C\\aac|\3\2\62")
        buf.write(";\5\2\13\f\17\17\"\"\4\2\f\f\17\17\2\u014b\2\3\3\2\2\2")
        buf.write("\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
        buf.write("\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3")
        buf.write("\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2")
        buf.write("\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'")
        buf.write("\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2")
        buf.write("\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29")
        buf.write("\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2")
        buf.write("C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2")
        buf.write("\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2")
        buf.write("\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2")
        buf.write("\2\2\3a\3\2\2\2\5c\3\2\2\2\7f\3\2\2\2\th\3\2\2\2\13j\3")
        buf.write("\2\2\2\rm\3\2\2\2\17p\3\2\2\2\21s\3\2\2\2\23u\3\2\2\2")
        buf.write("\25w\3\2\2\2\27y\3\2\2\2\31{\3\2\2\2\33}\3\2\2\2\35\177")
        buf.write("\3\2\2\2\37\u008e\3\2\2\2!\u0090\3\2\2\2#\u0094\3\2\2")
        buf.write("\2%\u0096\3\2\2\2\'\u009d\3\2\2\2)\u00a0\3\2\2\2+\u00a7")
        buf.write("\3\2\2\2-\u00ad\3\2\2\2/\u00b5\3\2\2\2\61\u00b7\3\2\2")
        buf.write("\2\63\u00bb\3\2\2\2\65\u00be\3\2\2\2\67\u00c5\3\2\2\2")
        buf.write("9\u00cb\3\2\2\2;\u00d0\3\2\2\2=\u00d7\3\2\2\2?\u00db\3")
        buf.write("\2\2\2A\u00de\3\2\2\2C\u00e3\3\2\2\2E\u00e9\3\2\2\2G\u00ec")
        buf.write("\3\2\2\2I\u00ef\3\2\2\2K\u00f4\3\2\2\2M\u00f7\3\2\2\2")
        buf.write("O\u00fb\3\2\2\2Q\u0106\3\2\2\2S\u010d\3\2\2\2U\u0115\3")
        buf.write("\2\2\2W\u011a\3\2\2\2Y\u0126\3\2\2\2[\u0129\3\2\2\2]\u012f")
        buf.write("\3\2\2\2_\u013a\3\2\2\2ab\7?\2\2b\4\3\2\2\2cd\7?\2\2d")
        buf.write("e\7?\2\2e\6\3\2\2\2fg\7>\2\2g\b\3\2\2\2hi\7@\2\2i\n\3")
        buf.write("\2\2\2jk\7>\2\2kl\7?\2\2l\f\3\2\2\2mn\7@\2\2no\7?\2\2")
        buf.write("o\16\3\2\2\2pq\7#\2\2qr\7?\2\2r\20\3\2\2\2st\7]\2\2t\22")
        buf.write("\3\2\2\2uv\7_\2\2v\24\3\2\2\2wx\7<\2\2x\26\3\2\2\2yz\7")
        buf.write("`\2\2z\30\3\2\2\2{|\7\60\2\2|\32\3\2\2\2}~\7a\2\2~\34")
        buf.write("\3\2\2\2\177\u0080\7k\2\2\u0080\u0081\7p\2\2\u0081\u0082")
        buf.write("\7k\2\2\u0082\u0083\7v\2\2\u0083\u0084\7k\2\2\u0084\u0085")
        buf.write("\7c\2\2\u0085\u0086\7n\2\2\u0086\u0087\7k\2\2\u0087\u0088")
        buf.write("\7|\2\2\u0088\u0089\7c\2\2\u0089\u008a\7v\2\2\u008a\u008b")
        buf.write("\7k\2\2\u008b\u008c\7q\2\2\u008c\u008d\7p\2\2\u008d\36")
        buf.write("\3\2\2\2\u008e\u008f\7=\2\2\u008f \3\2\2\2\u0090\u0091")
        buf.write("\7n\2\2\u0091\u0092\7g\2\2\u0092\u0093\7v\2\2\u0093\"")
        buf.write("\3\2\2\2\u0094\u0095\7.\2\2\u0095$\3\2\2\2\u0096\u0097")
        buf.write("\7e\2\2\u0097\u0098\7t\2\2\u0098\u0099\7g\2\2\u0099\u009a")
        buf.write("\7c\2\2\u009a\u009b\7v\2\2\u009b\u009c\7g\2\2\u009c&\3")
        buf.write("\2\2\2\u009d\u009e\7c\2\2\u009e\u009f\7u\2\2\u009f(\3")
        buf.write("\2\2\2\u00a0\u00a1\7u\2\2\u00a1\u00a2\7g\2\2\u00a2\u00a3")
        buf.write("\7n\2\2\u00a3\u00a4\7g\2\2\u00a4\u00a5\7e\2\2\u00a5\u00a6")
        buf.write("\7v\2\2\u00a6*\3\2\2\2\u00a7\u00a8\7y\2\2\u00a8\u00a9")
        buf.write("\7j\2\2\u00a9\u00aa\7g\2\2\u00aa\u00ab\7t\2\2\u00ab\u00ac")
        buf.write("\7g\2\2\u00ac,\3\2\2\2\u00ad\u00ae\7f\2\2\u00ae\u00af")
        buf.write("\7g\2\2\u00af\u00b0\7h\2\2\u00b0\u00b1\7c\2\2\u00b1\u00b2")
        buf.write("\7w\2\2\u00b2\u00b3\7n\2\2\u00b3\u00b4\7v\2\2\u00b4.\3")
        buf.write("\2\2\2\u00b5\u00b6\7-\2\2\u00b6\60\3\2\2\2\u00b7\u00b8")
        buf.write("\7p\2\2\u00b8\u00b9\7q\2\2\u00b9\u00ba\7y\2\2\u00ba\62")
        buf.write("\3\2\2\2\u00bb\u00bc\7)\2\2\u00bc\u00bd\7u\2\2\u00bd\64")
        buf.write("\3\2\2\2\u00be\u00bf\7t\2\2\u00bf\u00c0\7c\2\2\u00c0\u00c1")
        buf.write("\7p\2\2\u00c1\u00c2\7f\2\2\u00c2\u00c3\7q\2\2\u00c3\u00c4")
        buf.write("\7o\2\2\u00c4\66\3\2\2\2\u00c5\u00c6\7h\2\2\u00c6\u00c7")
        buf.write("\7k\2\2\u00c7\u00c8\7t\2\2\u00c8\u00c9\7u\2\2\u00c9\u00ca")
        buf.write("\7v\2\2\u00ca8\3\2\2\2\u00cb\u00cc\7n\2\2\u00cc\u00cd")
        buf.write("\7c\2\2\u00cd\u00ce\7u\2\2\u00ce\u00cf\7v\2\2\u00cf:\3")
        buf.write("\2\2\2\u00d0\u00d1\7j\2\2\u00d1\u00d2\7c\2\2\u00d2\u00d3")
        buf.write("\7u\2\2\u00d3\u00d4\7j\2\2\u00d4\u00d5\7g\2\2\u00d5\u00d6")
        buf.write("\7f\2\2\u00d6<\3\2\2\2\u00d7\u00d8\7p\2\2\u00d8\u00d9")
        buf.write("\7q\2\2\u00d9\u00da\7v\2\2\u00da>\3\2\2\2\u00db\u00dc")
        buf.write("\7k\2\2\u00dc\u00dd\7u\2\2\u00dd@\3\2\2\2\u00de\u00df")
        buf.write("\7k\2\2\u00df\u00e0\7u\2\2\u00e0\u00e1\7p\2\2\u00e1\u00e2")
        buf.write("\7v\2\2\u00e2B\3\2\2\2\u00e3\u00e4\7k\2\2\u00e4\u00e5")
        buf.write("\7u\2\2\u00e5\u00e6\7p\2\2\u00e6\u00e7\7)\2\2\u00e7\u00e8")
        buf.write("\7v\2\2\u00e8D\3\2\2\2\u00e9\u00ea\7v\2\2\u00ea\u00eb")
        buf.write("\7q\2\2\u00ebF\3\2\2\2\u00ec\u00ed\7q\2\2\u00ed\u00ee")
        buf.write("\7h\2\2\u00eeH\3\2\2\2\u00ef\u00f0\7y\2\2\u00f0\u00f1")
        buf.write("\7k\2\2\u00f1\u00f2\7v\2\2\u00f2\u00f3\7j\2\2\u00f3J\3")
        buf.write("\2\2\2\u00f4\u00f5\7c\2\2\u00f5\u00f6\7v\2\2\u00f6L\3")
        buf.write("\2\2\2\u00f7\u00f8\7j\2\2\u00f8\u00f9\7c\2\2\u00f9\u00fa")
        buf.write("\7u\2\2\u00faN\3\2\2\2\u00fb\u00fc\7k\2\2\u00fc\u00fd")
        buf.write("\7p\2\2\u00fd\u00fe\7k\2\2\u00fe\u00ff\7v\2\2\u00ff\u0100")
        buf.write("\7k\2\2\u0100\u0101\7c\2\2\u0101\u0102\7n\2\2\u0102\u0103")
        buf.write("\7k\2\2\u0103\u0104\7|\2\2\u0104\u0105\7g\2\2\u0105P\3")
        buf.write("\2\2\2\u0106\u010a\t\2\2\2\u0107\u0109\t\3\2\2\u0108\u0107")
        buf.write("\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u0108\3\2\2\2\u010a")
        buf.write("\u010b\3\2\2\2\u010bR\3\2\2\2\u010c\u010a\3\2\2\2\u010d")
        buf.write("\u0111\t\4\2\2\u010e\u0110\t\5\2\2\u010f\u010e\3\2\2\2")
        buf.write("\u0110\u0113\3\2\2\2\u0111\u010f\3\2\2\2\u0111\u0112\3")
        buf.write("\2\2\2\u0112T\3\2\2\2\u0113\u0111\3\2\2\2\u0114\u0116")
        buf.write("\5Y-\2\u0115\u0114\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0117")
        buf.write("\3\2\2\2\u0117\u0118\5W,\2\u0118V\3\2\2\2\u0119\u011b")
        buf.write("\t\6\2\2\u011a\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c")
        buf.write("\u011a\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u0124\3\2\2\2")
        buf.write("\u011e\u0120\7\60\2\2\u011f\u0121\t\6\2\2\u0120\u011f")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0120\3\2\2\2\u0122")
        buf.write("\u0123\3\2\2\2\u0123\u0125\3\2\2\2\u0124\u011e\3\2\2\2")
        buf.write("\u0124\u0125\3\2\2\2\u0125X\3\2\2\2\u0126\u0127\7/\2\2")
        buf.write("\u0127Z\3\2\2\2\u0128\u012a\t\7\2\2\u0129\u0128\3\2\2")
        buf.write("\2\u012a\u012b\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c")
        buf.write("\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u012e\b.\2\2\u012e")
        buf.write("\\\3\2\2\2\u012f\u0130\7\61\2\2\u0130\u0131\7\61\2\2\u0131")
        buf.write("\u0135\3\2\2\2\u0132\u0134\n\b\2\2\u0133\u0132\3\2\2\2")
        buf.write("\u0134\u0137\3\2\2\2\u0135\u0133\3\2\2\2\u0135\u0136\3")
        buf.write("\2\2\2\u0136\u0138\3\2\2\2\u0137\u0135\3\2\2\2\u0138\u0139")
        buf.write("\b/\2\2\u0139^\3\2\2\2\u013a\u013e\7$\2\2\u013b\u013d")
        buf.write("\13\2\2\2\u013c\u013b\3\2\2\2\u013d\u0140\3\2\2\2\u013e")
        buf.write("\u013f\3\2\2\2\u013e\u013c\3\2\2\2\u013f\u0141\3\2\2\2")
        buf.write("\u0140\u013e\3\2\2\2\u0141\u0142\7$\2\2\u0142`\3\2\2\2")
        buf.write("\f\2\u010a\u0111\u0115\u011c\u0122\u0124\u012b\u0135\u013e")
        buf.write("\3\b\2\2")
        return buf.getvalue()


class kismet_initializationLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    NAME = 40
    VAR = 41
    NUMBER = 42
    POSITIVE_NUMBER = 43
    NEG = 44
    WS = 45
    LINE_COMMENT = 46
    RANDOM_TEXT = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'=='", "'<'", "'>'", "'<='", "'>='", "'!='", "'['", 
            "']'", "':'", "'^'", "'.'", "'_'", "'initialization'", "';'", 
            "'let'", "','", "'create'", "'as'", "'select'", "'where'", "'default'", 
            "'+'", "'now'", "''s'", "'random'", "'first'", "'last'", "'hashed'", 
            "'not'", "'is'", "'isnt'", "'isn't'", "'to'", "'of'", "'with'", 
            "'at'", "'has'", "'initialize'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "NAME", "VAR", "NUMBER", "POSITIVE_NUMBER", "NEG", "WS", "LINE_COMMENT", 
            "RANDOM_TEXT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "NAME", "VAR", "NUMBER", "POSITIVE_NUMBER", "NEG", 
                  "WS", "LINE_COMMENT", "RANDOM_TEXT" ]

    grammarFileName = "kismet_initialization.ebnf"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


