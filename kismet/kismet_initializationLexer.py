# Generated from kismet_initialization.ebnf by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\65")
        buf.write("\u0159\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5")
        buf.write("\3\5\3\6\3\6\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3")
        buf.write("\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17")
        buf.write("\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&")
        buf.write("\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3)\3)\3)\3)\3)\3*\3*\3")
        buf.write("*\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3-\3-\7")
        buf.write("-\u011f\n-\f-\16-\u0122\13-\3.\3.\7.\u0126\n.\f.\16.\u0129")
        buf.write("\13.\3/\5/\u012c\n/\3/\3/\3\60\6\60\u0131\n\60\r\60\16")
        buf.write("\60\u0132\3\60\3\60\6\60\u0137\n\60\r\60\16\60\u0138\5")
        buf.write("\60\u013b\n\60\3\61\3\61\3\62\6\62\u0140\n\62\r\62\16")
        buf.write("\62\u0141\3\62\3\62\3\63\3\63\3\63\3\63\7\63\u014a\n\63")
        buf.write("\f\63\16\63\u014d\13\63\3\63\3\63\3\64\3\64\7\64\u0153")
        buf.write("\n\64\f\64\16\64\u0156\13\64\3\64\3\64\3\u0154\2\65\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("S+U,W-Y.[/]\60_\61a\62c\63e\64g\65\3\2\t\3\2c|\5\2C\\")
        buf.write("aac|\3\2C\\\6\2##C\\aac|\3\2\62;\5\2\13\f\17\17\"\"\4")
        buf.write("\2\f\f\17\17\2\u0161\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2")
        buf.write("\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2")
        buf.write("\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31")
        buf.write("\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2")
        buf.write("\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3")
        buf.write("\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2")
        buf.write("\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3")
        buf.write("\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G")
        buf.write("\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2")
        buf.write("Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2")
        buf.write("\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2")
        buf.write("\2\2e\3\2\2\2\2g\3\2\2\2\3i\3\2\2\2\5p\3\2\2\2\7r\3\2")
        buf.write("\2\2\tt\3\2\2\2\13v\3\2\2\2\rx\3\2\2\2\17{\3\2\2\2\21")
        buf.write("}\3\2\2\2\23\177\3\2\2\2\25\u0082\3\2\2\2\27\u0085\3\2")
        buf.write("\2\2\31\u0088\3\2\2\2\33\u008a\3\2\2\2\35\u008c\3\2\2")
        buf.write("\2\37\u008e\3\2\2\2!\u0090\3\2\2\2#\u0092\3\2\2\2%\u00a1")
        buf.write("\3\2\2\2\'\u00a3\3\2\2\2)\u00a7\3\2\2\2+\u00a9\3\2\2\2")
        buf.write("-\u00b0\3\2\2\2/\u00b3\3\2\2\2\61\u00ba\3\2\2\2\63\u00c0")
        buf.write("\3\2\2\2\65\u00c8\3\2\2\2\67\u00cb\3\2\2\29\u00cd\3\2")
        buf.write("\2\2;\u00d1\3\2\2\2=\u00d4\3\2\2\2?\u00db\3\2\2\2A\u00e1")
        buf.write("\3\2\2\2C\u00e6\3\2\2\2E\u00ed\3\2\2\2G\u00f1\3\2\2\2")
        buf.write("I\u00f4\3\2\2\2K\u00f9\3\2\2\2M\u00ff\3\2\2\2O\u0102\3")
        buf.write("\2\2\2Q\u0105\3\2\2\2S\u010a\3\2\2\2U\u010d\3\2\2\2W\u0111")
        buf.write("\3\2\2\2Y\u011c\3\2\2\2[\u0123\3\2\2\2]\u012b\3\2\2\2")
        buf.write("_\u0130\3\2\2\2a\u013c\3\2\2\2c\u013f\3\2\2\2e\u0145\3")
        buf.write("\2\2\2g\u0150\3\2\2\2ij\7h\2\2jk\7k\2\2kl\7n\2\2lm\7v")
        buf.write("\2\2mn\7g\2\2no\7t\2\2o\4\3\2\2\2pq\7\60\2\2q\6\3\2\2")
        buf.write("\2rs\7}\2\2s\b\3\2\2\2tu\7\177\2\2u\n\3\2\2\2vw\7?\2\2")
        buf.write("w\f\3\2\2\2xy\7?\2\2yz\7?\2\2z\16\3\2\2\2{|\7>\2\2|\20")
        buf.write("\3\2\2\2}~\7@\2\2~\22\3\2\2\2\177\u0080\7>\2\2\u0080\u0081")
        buf.write("\7?\2\2\u0081\24\3\2\2\2\u0082\u0083\7@\2\2\u0083\u0084")
        buf.write("\7?\2\2\u0084\26\3\2\2\2\u0085\u0086\7#\2\2\u0086\u0087")
        buf.write("\7?\2\2\u0087\30\3\2\2\2\u0088\u0089\7]\2\2\u0089\32\3")
        buf.write("\2\2\2\u008a\u008b\7_\2\2\u008b\34\3\2\2\2\u008c\u008d")
        buf.write("\7<\2\2\u008d\36\3\2\2\2\u008e\u008f\7`\2\2\u008f \3\2")
        buf.write("\2\2\u0090\u0091\7a\2\2\u0091\"\3\2\2\2\u0092\u0093\7")
        buf.write("k\2\2\u0093\u0094\7p\2\2\u0094\u0095\7k\2\2\u0095\u0096")
        buf.write("\7v\2\2\u0096\u0097\7k\2\2\u0097\u0098\7c\2\2\u0098\u0099")
        buf.write("\7n\2\2\u0099\u009a\7k\2\2\u009a\u009b\7|\2\2\u009b\u009c")
        buf.write("\7c\2\2\u009c\u009d\7v\2\2\u009d\u009e\7k\2\2\u009e\u009f")
        buf.write("\7q\2\2\u009f\u00a0\7p\2\2\u00a0$\3\2\2\2\u00a1\u00a2")
        buf.write("\7=\2\2\u00a2&\3\2\2\2\u00a3\u00a4\7n\2\2\u00a4\u00a5")
        buf.write("\7g\2\2\u00a5\u00a6\7v\2\2\u00a6(\3\2\2\2\u00a7\u00a8")
        buf.write("\7.\2\2\u00a8*\3\2\2\2\u00a9\u00aa\7e\2\2\u00aa\u00ab")
        buf.write("\7t\2\2\u00ab\u00ac\7g\2\2\u00ac\u00ad\7c\2\2\u00ad\u00ae")
        buf.write("\7v\2\2\u00ae\u00af\7g\2\2\u00af,\3\2\2\2\u00b0\u00b1")
        buf.write("\7c\2\2\u00b1\u00b2\7u\2\2\u00b2.\3\2\2\2\u00b3\u00b4")
        buf.write("\7u\2\2\u00b4\u00b5\7g\2\2\u00b5\u00b6\7n\2\2\u00b6\u00b7")
        buf.write("\7g\2\2\u00b7\u00b8\7e\2\2\u00b8\u00b9\7v\2\2\u00b9\60")
        buf.write("\3\2\2\2\u00ba\u00bb\7y\2\2\u00bb\u00bc\7j\2\2\u00bc\u00bd")
        buf.write("\7g\2\2\u00bd\u00be\7t\2\2\u00be\u00bf\7g\2\2\u00bf\62")
        buf.write("\3\2\2\2\u00c0\u00c1\7f\2\2\u00c1\u00c2\7g\2\2\u00c2\u00c3")
        buf.write("\7h\2\2\u00c3\u00c4\7c\2\2\u00c4\u00c5\7w\2\2\u00c5\u00c6")
        buf.write("\7n\2\2\u00c6\u00c7\7v\2\2\u00c7\64\3\2\2\2\u00c8\u00c9")
        buf.write("\7A\2\2\u00c9\u00ca\7?\2\2\u00ca\66\3\2\2\2\u00cb\u00cc")
        buf.write("\7-\2\2\u00cc8\3\2\2\2\u00cd\u00ce\7p\2\2\u00ce\u00cf")
        buf.write("\7q\2\2\u00cf\u00d0\7y\2\2\u00d0:\3\2\2\2\u00d1\u00d2")
        buf.write("\7)\2\2\u00d2\u00d3\7u\2\2\u00d3<\3\2\2\2\u00d4\u00d5")
        buf.write("\7t\2\2\u00d5\u00d6\7c\2\2\u00d6\u00d7\7p\2\2\u00d7\u00d8")
        buf.write("\7f\2\2\u00d8\u00d9\7q\2\2\u00d9\u00da\7o\2\2\u00da>\3")
        buf.write("\2\2\2\u00db\u00dc\7h\2\2\u00dc\u00dd\7k\2\2\u00dd\u00de")
        buf.write("\7t\2\2\u00de\u00df\7u\2\2\u00df\u00e0\7v\2\2\u00e0@\3")
        buf.write("\2\2\2\u00e1\u00e2\7n\2\2\u00e2\u00e3\7c\2\2\u00e3\u00e4")
        buf.write("\7u\2\2\u00e4\u00e5\7v\2\2\u00e5B\3\2\2\2\u00e6\u00e7")
        buf.write("\7j\2\2\u00e7\u00e8\7c\2\2\u00e8\u00e9\7u\2\2\u00e9\u00ea")
        buf.write("\7j\2\2\u00ea\u00eb\7g\2\2\u00eb\u00ec\7f\2\2\u00ecD\3")
        buf.write("\2\2\2\u00ed\u00ee\7p\2\2\u00ee\u00ef\7q\2\2\u00ef\u00f0")
        buf.write("\7v\2\2\u00f0F\3\2\2\2\u00f1\u00f2\7k\2\2\u00f2\u00f3")
        buf.write("\7u\2\2\u00f3H\3\2\2\2\u00f4\u00f5\7k\2\2\u00f5\u00f6")
        buf.write("\7u\2\2\u00f6\u00f7\7p\2\2\u00f7\u00f8\7v\2\2\u00f8J\3")
        buf.write("\2\2\2\u00f9\u00fa\7k\2\2\u00fa\u00fb\7u\2\2\u00fb\u00fc")
        buf.write("\7p\2\2\u00fc\u00fd\7)\2\2\u00fd\u00fe\7v\2\2\u00feL\3")
        buf.write("\2\2\2\u00ff\u0100\7v\2\2\u0100\u0101\7q\2\2\u0101N\3")
        buf.write("\2\2\2\u0102\u0103\7q\2\2\u0103\u0104\7h\2\2\u0104P\3")
        buf.write("\2\2\2\u0105\u0106\7y\2\2\u0106\u0107\7k\2\2\u0107\u0108")
        buf.write("\7v\2\2\u0108\u0109\7j\2\2\u0109R\3\2\2\2\u010a\u010b")
        buf.write("\7c\2\2\u010b\u010c\7v\2\2\u010cT\3\2\2\2\u010d\u010e")
        buf.write("\7j\2\2\u010e\u010f\7c\2\2\u010f\u0110\7u\2\2\u0110V\3")
        buf.write("\2\2\2\u0111\u0112\7k\2\2\u0112\u0113\7p\2\2\u0113\u0114")
        buf.write("\7k\2\2\u0114\u0115\7v\2\2\u0115\u0116\7k\2\2\u0116\u0117")
        buf.write("\7c\2\2\u0117\u0118\7n\2\2\u0118\u0119\7k\2\2\u0119\u011a")
        buf.write("\7|\2\2\u011a\u011b\7g\2\2\u011bX\3\2\2\2\u011c\u0120")
        buf.write("\t\2\2\2\u011d\u011f\t\3\2\2\u011e\u011d\3\2\2\2\u011f")
        buf.write("\u0122\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2")
        buf.write("\u0121Z\3\2\2\2\u0122\u0120\3\2\2\2\u0123\u0127\t\4\2")
        buf.write("\2\u0124\u0126\t\5\2\2\u0125\u0124\3\2\2\2\u0126\u0129")
        buf.write("\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128")
        buf.write("\\\3\2\2\2\u0129\u0127\3\2\2\2\u012a\u012c\5a\61\2\u012b")
        buf.write("\u012a\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\3\2\2\2")
        buf.write("\u012d\u012e\5_\60\2\u012e^\3\2\2\2\u012f\u0131\t\6\2")
        buf.write("\2\u0130\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u013a\3\2\2\2\u0134")
        buf.write("\u0136\7\60\2\2\u0135\u0137\t\6\2\2\u0136\u0135\3\2\2")
        buf.write("\2\u0137\u0138\3\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139")
        buf.write("\3\2\2\2\u0139\u013b\3\2\2\2\u013a\u0134\3\2\2\2\u013a")
        buf.write("\u013b\3\2\2\2\u013b`\3\2\2\2\u013c\u013d\7/\2\2\u013d")
        buf.write("b\3\2\2\2\u013e\u0140\t\7\2\2\u013f\u013e\3\2\2\2\u0140")
        buf.write("\u0141\3\2\2\2\u0141\u013f\3\2\2\2\u0141\u0142\3\2\2\2")
        buf.write("\u0142\u0143\3\2\2\2\u0143\u0144\b\62\2\2\u0144d\3\2\2")
        buf.write("\2\u0145\u0146\7\61\2\2\u0146\u0147\7\61\2\2\u0147\u014b")
        buf.write("\3\2\2\2\u0148\u014a\n\b\2\2\u0149\u0148\3\2\2\2\u014a")
        buf.write("\u014d\3\2\2\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2")
        buf.write("\u014c\u014e\3\2\2\2\u014d\u014b\3\2\2\2\u014e\u014f\b")
        buf.write("\63\2\2\u014ff\3\2\2\2\u0150\u0154\7$\2\2\u0151\u0153")
        buf.write("\13\2\2\2\u0152\u0151\3\2\2\2\u0153\u0156\3\2\2\2\u0154")
        buf.write("\u0155\3\2\2\2\u0154\u0152\3\2\2\2\u0155\u0157\3\2\2\2")
        buf.write("\u0156\u0154\3\2\2\2\u0157\u0158\7$\2\2\u0158h\3\2\2\2")
        buf.write("\f\2\u0120\u0127\u012b\u0132\u0138\u013a\u0141\u014b\u0154")
        buf.write("\3\b\2\2")
        return buf.getvalue()


class kismet_initializationLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    NAME = 44
    VAR = 45
    NUMBER = 46
    POSITIVE_NUMBER = 47
    NEG = 48
    WS = 49
    LINE_COMMENT = 50
    RANDOM_TEXT = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'filter'", "'.'", "'{'", "'}'", "'='", "'=='", "'<'", "'>'", 
            "'<='", "'>='", "'!='", "'['", "']'", "':'", "'^'", "'_'", "'initialization'", 
            "';'", "'let'", "','", "'create'", "'as'", "'select'", "'where'", 
            "'default'", "'?='", "'+'", "'now'", "''s'", "'random'", "'first'", 
            "'last'", "'hashed'", "'not'", "'is'", "'isnt'", "'isn't'", 
            "'to'", "'of'", "'with'", "'at'", "'has'", "'initialize'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "NAME", "VAR", "NUMBER", "POSITIVE_NUMBER", "NEG", "WS", "LINE_COMMENT", 
            "RANDOM_TEXT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "NAME", "VAR", 
                  "NUMBER", "POSITIVE_NUMBER", "NEG", "WS", "LINE_COMMENT", 
                  "RANDOM_TEXT" ]

    grammarFileName = "kismet_initialization.ebnf"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


