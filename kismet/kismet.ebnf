grammar kismet;
simulation
  : (location|trait|trait_oppositions|action|pattern)+ EOF
  ;

location
  : 'location' name count ';'
  ;

count : NUMBER;
NUMBER : [0-9]+ ;
param : NUMBER;
pdf:NAME;

trait
  : 'trait' name (arguments)? ':' modifier* goto*
    ('at' at)? ';'
  ;

decay
  : ('decay' pdf? param+)
  ;

trait_oppositions
  : 'opposed' name '!=' name ';'
;

modifier
  : valence '(' tags+ 'if' query+ ')'
  | valence '(' tags+ ')'
  ;

goto
  : valence '@' tags+ 'if' query+ '@'
  | valence '@' tags+ '@'
  ;

valence
  : '+'+
  | '-'+
  ;

tags
  : NAME
  ;

relationship
  : 'self'
  | 'other'
  | '->'
  | '<-'
  | '<->'
  | '?>'
  | '<?'
  | '<?>'
  | var '->' var
  | var '<->' var
  | var '<-' var
  | var '<?>' var
  | var '?>'
  |  '<?' var
  | var ':'
  ;

pattern :
  'pattern' name arguments? ':' query+ ';';

arguments:
  var+;


name : NAME;
NAME   : ('!')?[a-z][a-zA-Z_]* ;
var : VAR;
VAR : [A-Z][a-zA-Z_!]*;


query
  : relationship '(' tags ')' (comparison)?
  ;

comparison :
  comparator (query|count)
;
comparator :
  '>' |
  '<' |
  '>='|
  '<='|
  '='|
  '==';

WS : [ \t\r\n]+ -> skip ;

LINE_COMMENT
    : '#' ~[\r\n]* -> skip
;

has: tags+;
add: query+;
inc: query+;
dec: query+;
remove: query+;
at: name+;

action
  : 'action' name (arguments)? ':'
      ('at' at)?
      ('is' has)?
      ('if' query+)?
      ('add' add)?
      ('del' remove)?
      ('inc' inc)?
      ('dec' dec)?
      ';'
  ;
