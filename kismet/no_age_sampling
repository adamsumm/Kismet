#include <incmode>.


#const families = 5.
#const characters = 100.
#const factories = 1.

1 {family_count(M) } 1  :- M =families..families.
family(I) :- I = 1..M, family_count(M).

1 {character_count(M)} 1 :- M =characters..characters.
character(I) :- I = 1..M, character_count(M).


%%%%Trait Stuff
traits(extrovert;introvert;manic_depressive;happy_go_lucky;generous;selfish;gregarious;cantankerous).

2 {is(character(Character),Trait) : traits(Trait)} 5 :- character(Character).

:- is(Character,extrovert), is(Character,introvert).
:- is(Character,generous), is(Character,selfish).
:- is(Character,gregarious), is(Character,cantankerous).

%For each trait, it should be the case, that it shows up some amount of time
:- {is(Character, Trait)} Characters/(2*Traits) ,traits(Trait), Traits = {traits(_)}, character_count(Characters).



bits(B) :- B=0..8.
%%%%Other Stuff
%1 {age(character(Character), Age): Age=1..70} 1 :- character(Character).
%{age_bits(character(Character), Bit): Bit=0..8} :- character(Character).
%:- #sum {2**Bit:age_bits(character(Character), Bit)} > 70, character(Character).
%:- #sum {2**Bit:age_bits(character(Character), Bit)} < 1, character(Character).  

%mutually exclusive wealth: rich/poor/middleclass.
exclusive_trait(wealth, (rich;poor;middleclass)).

%default character:
%    has [1] wealth.
1  {is(character(Character),Trait) : exclusive_trait(TraitType,Trait)} 1 :- character(Character),exclusive_trait(TraitType,_).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Family %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

2 {assigned(family(FamilyID), parent, character(CharacterID)): 
    character(CharacterID),
    (CharacterID+FamilyID) \  (characters/(4*families)) = 0
    }2 :- family(FamilyID).

:- assigned(Family, parent, Character), #sum {2**Bit:age_bits(Character, Bit)} < 20.
:- assigned(Family, parent, Character), #sum {2**Bit:age_bits(Character, Bit)} > 60.
:- 2 {assigned(Family, parent, Character)}, character(Character).

is(Character,parent,Other)  :- assigned(Family, parent, Character), assigned(Family, child, Other).

is(Character,married,Other)  :- assigned(Family, parent, Character), assigned(Family, parent, Other), Character != Other.


%Child Stuff
%1 {assigned(family(FamilyID), child, character(CharacterID)): CharacterID=(FamilyID*characters/families)..(FamilyID+1)*characters/families} 5 :- family(FamilyID).

1 {assigned(family(FamilyID), child, character(CharacterID)):  
    character(CharacterID),
    (CharacterID+FamilyID) \ (characters/(10*families)) = 0
    } 5 :- family(FamilyID).

:- 2 {assigned(Family, child, Character)}, character(Character).

:- assigned(Family, child, Character), #sum {2**Bit:age_bits(Character, Bit)} <1.
:- assigned(Family, child, Character),#sum {2**Bit:age_bits(Character, Bit)} > 40.
is(Character,child,Other)  :- assigned(Family, child, Character), assigned(Family, parent, Other).
is(Character,sibling,Other)  :- assigned(Family, child, Character), assigned(Family, child, Other), Character != Other.


:- assigned(Family, child, Character),assigned(Family, parent, Other),
            #sum {2**Bit:age_bits(Other, Bit); -(2**Bit2):age_bits(Character, Bit2)} < 20.
            
%Parent and Child share traits
:- assigned(Family, child, Character), assigned(Family, parent, Other), {is(Character,Trait); is(Other,Trait) } 0.        
        


%%% SPECIFY CONSTRAINTS ABOUT THE GENERATION
%pattern(grand_parent(GC,P,GP)) :- is(GC, child, P), is(P, child, GP).
%:- not pattern(grand_parent(_,_,_)).
pattern(grand_parent) :- is(GC, child, P), is(P, child, GP).
:- not pattern(grand_parent).

%pattern(fall_from_wealth(GC,GP)) :- is(GC, child, P), is(P, child, GP), is(GC,poor), is(GP,rich).
%:- not pattern(fall_from_wealth(_,_)).
pattern(fall_from_wealth) :- is(GC, child, P), is(P, child, GP), is(GC,poor), is(GP,rich).
:- not pattern(fall_from_wealth).

%pattern(rags_to_riches(GC,P)) :- is(GC, child, P), is(GC,rich), is(P,poor).
%:- not pattern(rags_to_riches(_,_)).

pattern(rags_to_riches) :- is(GC, child, P), is(GC,rich), is(P,poor).
:- not pattern(rags_to_riches).




% select [1] character as parentA:
%     shares wealth with parentB.
:-  assigned(Family, parent, Character), assigned(Family, parent, Other), is(Character,Trait), exclusive_trait(wealth,Trait), not is(Other,Trait).

% select [1] character as child:
%     shares wealth with parentA if age < 25.
:-  assigned(Family, parent, Character), assigned(Family, child, Other), is(Character,Trait), exclusive_trait(wealth,Trait), not is(Other,Trait),
     #sum {2**Bit:age_bits(Other, Bit)} < 25.
     
%#show is/2.
%#show is/3.
%#show pattern/1.
%#show age_bits/2.




#program assignment.

1 {factory_count(M):   M =factories..factories} 1.
factory(I) :- I = 1..M, factory_count(M).


%initialization factory:
%    select [2:3] character as worker:
%        is employee of factory
%        :where         
%        age = [18:50],
%        is poor;

2 {assigned(factory(FactoryID), worker, character(CharacterID)): character(CharacterID)} 3 :- factory(FactoryID).
is(Character,employee,factory(FactoryID)) :- assigned(factory(FactoryID), worker,Character).
:- assigned(factory(FactoryID), worker,Character), not is(Character,poor).
:- assigned(factory(FactoryID), worker,Character), 
    #sum {2**Bit:age_bits(Character, Bit)} < 18.
:- assigned(factory(FactoryID), worker,Character), 
    #sum {2**Bit:age_bits(Character, Bit)}> 50.
    
%    select [1] character as manager:
%        age = [30:50],
%        is middleclass,
%        is manager of factory;

1 {assigned(factory(FactoryID), manager, character(CharacterID)): character(CharacterID)} 1 :- factory(FactoryID).
is(Character,manager,factory(FactoryID)) :- assigned(factory(FactoryID), manager,Character).
:- assigned(factory(FactoryID), manager,Character), not is(Character,middleclass).
:- assigned(factory(FactoryID), manager,Character), 
    #sum {2**Bit:age_bits(Character, Bit)} < 30.
:- assigned(factory(FactoryID), manager,Character), 
    #sum {2**Bit:age_bits(Character, Bit)}> 50.        
    
%    select [1] character as owner:
%        age = [40:65],
%        is rich,
%        is owner of factory.

1 {assigned(factory(FactoryID), owner, character(CharacterID)): character(CharacterID)} 1 :- factory(FactoryID).
is(Character,owner,factory(FactoryID)) :- assigned(factory(FactoryID), owner,Character).
:- assigned(factory(FactoryID), owner,Character), not is(Character,rich).
:- assigned(factory(FactoryID), owner,Character), 
    #sum {2**Bit:age_bits(Character, Bit)} < 40.
:- assigned(factory(FactoryID), owner,Character), 
    #sum {2**Bit:age_bits(Character, Bit)}> 65.            




%prevent  0 character lives_at residence.
%:- is(Residence,residence), 0 {is(_, lives_at, Residence)} 0.

%PersonA can_live_with PersonB if PersonA and PersonB are married to each other.
is(PersonA, can_live_with, PersonB) :- 
                            is(PersonA, married, PersonB), 
                            is(PersonB, married, PersonA) .

is(PersonB, can_live_with, PersonA) :- 
                            is(PersonA, married, PersonB), 
                            is(PersonB, married, PersonA) .
                            
%Parent and Child must_live_with each other if Parent  is parent to Child, Childâ€™s age < 18.

is(Parent, must_live_with, Child) :- 
    is(Parent, parent, Child), 
   #sum {2**Bit:age_bits(Child, Bit)} < 18.

is(Child, must_live_with, Parent) :- 
    is(Parent, parent, Child), 
   #sum {2**Bit:age_bits(Child, Bit)} < 18.

is(Parent, can_live_with, Child) :- 
    is(Parent, parent, Child).

is(Child, can_live_with, Parent) :- 
    is(Parent, parent, Child). 

is(Child, can_live_with, Sibling) :- 
    is(Sibling, sibling, Child).  
   
%PersonA and PersonB can_live_with each other if PersonA and PersonB are roommates with each other.

is(PersonA, must_live_with, PersonB) :- 
                            is(PersonA, roommates, PersonB), 
                            is(PersonB, roommates, PersonA) .

is(PersonA, can_live_with, PersonB) :- 
                            is(PersonA, roommates, PersonB), 
                            is(PersonB, roommates, PersonA) .

is(PersonA, roommates, PersonB) :- is(PersonB, roommates, PersonA).
is(PersonA, roommates, PersonC) :- is(PersonB, roommates, PersonA), is(PersonC, roommates, PersonB), PersonA != PersonC, PersonA != PersonB, PersonB != PersonC.

is(character(Character), can_live_with,character(Character)) :- character(Character). 


%require PersonA and PersonB lives_at same if PersonA and PersonB can_live_with each other
%:- is(PersonA, can_live_with,PersonB), is(PersonB, can_live_with,PersonA), is(PersonA, lives_at,Other), is(PersonB,lives_at,Other2), %PersonA != PersonB, Other != Other2.

%:- is(PersonA, lives_at,Residence), is(PersonB, lives_at,Residence), not is(PersonA, can_live_with,PersonB).
%:- is(PersonA, must_live_with, PersonB),is(PersonA, lives_at,ResidenceA), is(PersonB, lives_at,ResidenceB), ResidenceA != ResidenceB.

{lives_with(PersonA, PersonB)} :- is(PersonA, can_live_with,PersonB).
lives_with(PersonA, PersonB) :- is(PersonA,must_live_with,PersonB).
lives_with(PersonA, PersonB) :- lives_with(PersonB, PersonA).

{lives_at(PersonA, residence(PersonA)) :  lives_with(PersonA, PersonB)} 1 :- lives_with(PersonA, PersonB).
lives_at(PersonA, Location) :- lives_with(PersonA, PersonB), lives_at(PersonB, Location), PersonA != PersonB.
:- 2 {lives_at(PersonA, _)}, lives_at(PersonA,_).
:-  {lives_at(character(PersonA), _)} 0, character(PersonA).
:-  lives_at(PersonA,RA) , lives_with(PersonA,PersonB), lives_at(PersonB, RB), RA != RB.
{lives_at(character(PersonA), residence(character(PersonA)))} 1  :- character(PersonA), not lives_with(PersonA,_).

is(Person, lives_at, Residence) :- lives_at(Person, Residence).
%lives_at(character(PersonA), residence(character(PersonA))) :- character(PersonA), not lives_with(PersonA,_).

more_than_one(Person,R1, R2) :- lives_at(Person,R1), lives_at(Person,R2), R1 != R2.
%#show lives_at/2.
%#show lives_with/2.
%#show lives_alone/1.
%#show more_than_one/3.

residence(R) :- lives_at(_,R).


%This means go through the possible things of type residence
%1 {mansion_count(M)  : M =0..10} 1.
%mansion(I) :- I = 1..M, mansion_count(M).
%is(mansion(I), mansion) :- mansion(I).
%1 {house_count(M)  : M =0..10} 1.
%house(I) :- I = 1..M, house_count(M).
%is(house(I), house) :- house(I).
%1 {tenement_count(M)  : M =0..10} 1.
%tenement(I) :- I = 1..M, tenement_count(M).

%1 {residenceCount(I) : I=families*3..characters} 1. 
residence(I) :- lives_at(_,I).
residence_type(mansion;house;tenement).
1 {is(I,Type) : residence_type(Type)} 1 :- residence(I).
%abstract residence extends location.

is(Residence, location) :- is(Residence,residence).

%define mansion extends residence:
%	require all who lives_at mansion are rich.
is(Mansion, residence) :- is(Mansion,mansion).
:- is(Mansion,mansion), is(Other, lives_at, Mansion), not is(Other, rich).

%define house extends residence:
%	require all who lives_at house are middleclass.
is(House, residence) :- is(House,house).
:- is(House,house), is(Other, lives_at, House), not is(Other, middleclass).

%define tenement extends residence:
%	require all who lives_at tenement are poor.
is(Tenement, residence) :- is(Tenement,tenement).
:- is(Tenement,tenement), is(Other, lives_at, Tenement), not is(Other, poor).

