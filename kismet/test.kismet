
	
location bar:
	 supports: [1:10] _-^^^^-_
	 patron, [2:3] bartender, [1] owner;
	 
	 name: "[[bar_owner.first_name|bar_owner.last_name]'s [place|bar|tap]|#bar_name#";
	 
	 initialization:
		cast [1] bar_owner,
	 	cast [1:2] bartender;
	each_turn:
		cast [1:10] patron.

action befriend_enemy_of_enemy(>Person,<EnemyOfEnemy):
    if pattern(enemy_of_enemy,Person,EnemyOfEnemy);
    result: Person and EnemyOfEnemy like each other += 2.

action waste_time(>Person)
"Person is lazy and just whiles the day away.":
       tags: lazy, fun.
       
action drink_the_day_away(>Person)
"Person is lazy and goes to the bar to drink the day away":
       location: bar(Person);
       tags: lazy, drinking;
       result: Person is drunk.

action sober_up(>Person)
"Person sobers up":
	if Person is drunk;
       	result: Person isnt drunk.

action mingle(>Person, <Other)
"Person and Other mingle with each other":
       location: (Person, Other);
       tags: talk;
       result: Other likes Person += 1.

action mingle_loudly(>Person, <Other)
"Person and Other mingle loudly with each other":
       location: (Person, Other);
       if Person is extroverted;
       tags: talk;
       result: Other likes Person += 1.
       
action gossip_about(>Gossiper, <Gossipee, ^GossipedAbout,*GossipedAction ):
       location: (Gossiper, Gossipee) ?(GossipedAbout);
       tags: talk;
       visibility++;
       if 
	  Gossipee  doesn't know GossipedAction,
	  GossipedAbout did GossipedAction,
	  GossipedAbout saw GossipedAction,
	  GossipedAbout received GossipedAction,
	  GossipedAbout heard GossipedAction,
       	  Gossiper knows GossipedAction;
       result:
       	       Gossipee likes Gossiper += 1,
	       Gossipee heard GossipedAction.

action flirt(>Person, <Other) extends mingle(>Person, <Other)
"Person flirts with Other":
       location: (Person, Other);
       tags: talk, romance;
       visibility++;
       result:
       	       Person likes Other += 1.


action sulk(>Person) costs 1:
       tags: sad;
       if Person's sadness > 5.

//COMMENTS!
action slap(>Slapper, <Slapped, *UnwantedRomance)
"Slapper [slaps|hits|strikes] Slapped in the face":  
    tags: violent;
    // Slapped did UnwantedRomance to Slapper -- ADD THIS
    // Slapped did UnwantedRomance with Slapper -- ADD THIS
    if Slapped did UnwantedRomance,
       UnwantedRomance is romance,
       Slapper received UnwantedRomance,
       Slapper likes Slapped < 2;
    visibility++++;
    result: Slapped likes Slapper -= 5,
            Slapped is hurt.
  

status hurt(>Self):
    +++(selfcare).

status scalar likes/like/liked(>Self,<Other):.

default trait horny(>Self,<Other):
    ++(romance if Self  spark Other).
    
default trait but_not_too_horny(>Self,<Other):
    -(romance).


trait snoopy(>Self,*Action):
      +++(observation if *Action is secretive),
      +(observation).
      
trait drunkard(>Self) opposes teetotaler:
      +++(drinking),
      +@bar@.

status drunk(>Self):
       +++(impulsive, anger).

trait sad_drunk(>Self):
      +++(sad if Self is drunk).

trait extrovert/extroverted(>Self) opposes introvert/introverted:
      +++(talk).

trait violent(>Self) opposes gentle:
      +++(violent).
      
trait religious(>Self) opposes atheist:
      +++(religious).
      
action become_bartender(>TheTender) 
       extends cast bartender(>TheTender)
       "[TheTender finds a job as a bartender|TheTender decided to become a barkeep]":.
       
action repair_location(>Initiator, @Location):
	location: Location(Initiator);
	if Location is damaged;
	result: Location is not damaged.

action tend_bar(>Tender:bartender)
 "The Tender serves drinks at their work.":
      	tags: work, drinking.

action be_sneaky(>Sneaker):
       tags: sneaky;
       visibility---.

action barroom_brawl(>Initiator,<Combatant, @Location)
"Initiator started a drunken brawl with Combatant":
	location: Location(Initiator, Combatant);
	tags: fighting, angry, gossipable;
	visibility++++;
	if
		Initiator is drunk,
		Combatant is drunk,
		Location is bar,
		Initiator dislikes Combatant > 5;
	result: Initiator is hurt, Combatant is hurt,
		Initiator and Combatant dislike each other,
		Location is damaged,
	 	Initiator and Combatant do not like each other,
	 	Initiator and Combatant like each other -= 5.

response action disregard(>Person,<RudePerson,*Action):
       if Action is gossipable,
       	  RudePerson did Action,
	  Person saw Action;
       result: Person dislikes RudePerson.	  	


role ur_job(>TheWorker):
	tags: work;
	if TheWorker missing ur_job.
	
role child_laborer(>TheWorker) extends ur_job(>TheWorker):
     if TheWorker's age < 16.

role bartender(>TheWorker) extends ur_job(>TheWorker):
     tags: drinking;
     if TheWorker's age >= 18.
     
pattern enemy_of_my_enemy(>Me,>EnemyOfMyEnemy)
    "Me and EnemyOfMyEnemy are united in their dislike for Enemy":
    if Me likes Enemy < -3, Enemy likes EnemyOfMyEnemy < -3.
    
pattern milquetoast(>Me,>Other)
    "Me and Other feel pretty ambivalent about each other":
    if Me likes Other = 0, Other likes Me = 0.
    