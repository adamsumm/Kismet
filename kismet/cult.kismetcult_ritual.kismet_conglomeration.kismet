////////////////////////////////////////////////////////////
// New from-scratch system
// CULT TOWN
////////////////////////////////////////////////////////////

//randomly start somewhere in spring 1900-1910
//time year: ?[1900:1910] season: [spring|summer|fall|winter]*.1910
time year: ?[1900:1910] month: [jan|feb|march|apr|may|jun|jul|aug|sep|oct|nov|dec]* day: [1:30]*[5:10].

location church:
    supports: [4:6] patron, 
        [1:2] priest, 
        [1] deacon;
    each_turn:
        cast patron.
        
location school:
    supports: [1] headmaster,
        [6] student.


location boarding_house:
    supports: [1] owner,
        [1] housekeeper,
        [2] boarder,
        [1] visitor;
    each_turn:
        cast visitor.

location bookstore:
    supports: [1] owner,
        [1] clerk,
        [1] regular,
        [2] customer;
    each_turn:
        cast customer.
        
location town_square:
    supports: [5] people;
    each_turn:
        cast people.
        
location wharf:
    supports: [4] dockworker,
        [2] fisherman,
        [1] sailor,
        [2] loiterer;
    each_turn:
        cast loiterer.

location warehouse:
    supports: [1] owner,
        [1] unionrep,
        [1] foreman,
        [4] worker.
        
location bar:
    supports: [10] people;
    each_turn:
        cast people.

////////////////////////////////////////////////////////////
//  PATTERNS
////////////////////////////////////////////////////////////
 
pattern romantic_rivals(>Me, >Rival, >Subject)
    "Me and Rival compete for the love of Subject":
    if Me likes Rival <= -5,
        Rival likes Me <= -5,
        Me likes Subject >= 10,
        Rival likes Subject >= 10.

pattern nemesis(>Me, >Nemesis)
    "Me and Nemesis are arch rivals who hate each other":
    if Me likes Nemesis <= -10,
        Nemesis likes Me <= -10.

pattern mutual_dislike(>Me, >Rival)
    "Me and Rival share a mutual dislike for each other.":
    if Me likes Rival <= -5, Rival likes Me <= -5.
    
////////////////////////////////////////////////////////////
//  ACTIONS
////////////////////////////////////////////////////////////

//action exist(>Person)
//"Person exists here.":.

//CHURCH
action pray_alone(>Churchgoer:patron)
"Churchgoer prays.":
    location: church(Churchgoer).
    
action sermon(>Deacon:deacon)
"Deacon conducts a sermon.":
    tags: employment;
    location: church(Deacon).
    
action study_religion(>Priest:priest)
"Priest studies from holy manuscripts.":
    tags: employment;
    location: church(Priest).
    
//BOARDING HOUSE
action boarding_house_maintenance(>Owner:owner)
"Owner does some maintenance on the building.":
    tags: employment;
    location: boarding_house(Owner).
    
action housekeeping(>Housekeeper:housekeeper)
"Housekeeper launders the beds.":
    tags: employment;
    location: boarding_house(Housekeeper).
    
action boarder_lounge(>Boarder:boarder)
"Boarder lounges in their room.":
    location: boarding_house(Boarder).
    
action boarding_house_visitor(>Visitor:visitor)
"Visitor visits the boarding house.":
    location: boarding_house(Visitor).
    
//TOWN SQUARE
action loiterer(>Loiterer)
"Loiterer loiters.":
    location: town_square(Loiterer).
    
//SCHOOL
action student_learning(>Student:student)
"Student learns.":
    location: school(Student).
    
action headmaster_teaches(>Headmaster:headmaster)
"Headmaster teaches.":
    tags: employment;
    location: school(Headmaster).
    
//BOOKSTORE
action bookstore_owner(>Owner:owner)
"Owner orders books.":
    tags: employment;
    location: bookstore(Owner).
    
action bookstore_clerk(>Clerk:clerk)
"Clerk stocks shelves.":
    tags: employment;
    location: bookstore(Clerk).
    
action bookstore_regular(>Regular:regular)
"Regular requests a special order.":
    location: bookstore(Regular).
    
action bookstore_customer(>Customer:customer)
"Customer browses the books.":
    location: bookstore(Customer).
    
//WHARF
action wharf_work(>Worker:dockworker)
"Worker unloads cargo.":
    tags: employment;
    location: wharf(Worker).
    
action fish(>Fisherman:fisherman)
"Fisherman fishes.":
    location: wharf(Fisherman).
    
action sailor_loiter(>Sailor:sailor)
"Sailor lounges aboard.":
    location: wharf(Sailor).
    
action wharf_loiter(>Loiterer)
"Loiterer looks out over the sea.":
    location: wharf(Loiterer).
    
//WAREHOUSE
action warehouse_owner(>Owner:owner)
"Owner balances the accounts.":
    tags: employment;
    location: warehouse(Owner).
    
action warehouse_union_rep(>Union:unionrep)
"Union organizes the workers.":
    tags: employment;
    location: warehouse(Union).
    
action warehouse_foreman(>Foreman:foreman)
"Foreman oversees the workers.":
    tags: employment;
    location: warehouse(Foreman).
    
action warehouse_worker(>Worker:worker)
"Worker labours.":
    tags: employment;
    location: warehouse(Worker).
    
//BAR
action bar_generic(>Self)
"Self drinks.":
    location: bar(Self).

///////////////////////////////////////////////////////////////
//  STATUS
//////////////////////////////////////////////////////////////
 
status scalar likes/like/liked(>Self,<Other):.

/////////////////////////////////////////////////////////////
//  TRAITS
/////////////////////////////////////////////////////////////

trait gregarious(>Self) opposes narcissistic:
    +++(gregarious).
    
trait narcissistic(>Self) opposes gregarious:
    +++(narcissistic).
    
trait traditionalist(>Self) opposes reformist:
    +++(traditionalist).
    
trait reformist (>Self):
    +++(reformist).

trait skeptic(>Self) opposes believer:
    +++(skeptic).
    
trait believer (>Self):
    +++(believer).
    


default trait workers_go_to_work(>Self,@Location):
     +++(employment),
    ++++++@if Self is employee of Location@.       

location church:
    supports: [100] cultist;
    each_turn:
        cast cultist.
        
location narthex:
    supports: [100] cultist;
    each_turn:
        cast cultist.
        
location sanctuary:
    supports: [100] cultist;
    each_turn:
        cast cultist.
        
location altar:
    supports: [100] cultist;
    each_turn:
        cast cultist.
        
location crypt:
    supports: [100] cultist;
    each_turn:
        cast cultist.
        
location nave:
    supports: [100] cultist;
    each_turn:
        cast cultist.
        
location chapel:
    supports: [100] cultist;
    each_turn:
        cast cultist.
    
    
    
pattern romantic_rivals(>Me, >Rival, >Subject)
    "Me and Rival compete for the love of Subject":
    if Me likes Rival <= -5,
        Rival likes Me <= -5,
        Me likes Subject >= 10,
        Rival likes Subject >= 10.

pattern nemesis(>Me, >Nemesis)
    "Me and Nemesis are arch rivals who hate each other":
    if Me likes Nemesis <= -10,
        Nemesis likes Me <= -10.

pattern mutual_dislike(>Me, >Rival)
    "Me and Rival share a mutual dislike for each other.":
    if Me likes Rival <= -5, Rival likes Me <= -5.
    
////////////////////////////////////////////////////////////
//  ACTIONS
////////////////////////////////////////////////////////////

//action exist(>Person)
//"Person exists here.":.

//CHURCH
action pray_alone(>Churchgoer:patron)
"Churchgoer prays.":
    location: church(Churchgoer).
    
action sermon(>Deacon:deacon)
"Deacon conducts a sermon.":
    tags: employment;
    location: church(Deacon).
    
action study_religion(>Priest:priest)
"Priest studies from holy manuscripts.":
    tags: employment;
    location: church(Priest).
    
//BOARDING HOUSE
action boarding_house_maintenance(>Owner:owner)
"Owner does some maintenance on the building.":
    tags: employment;
    location: boarding_house(Owner).
    
action housekeeping(>Housekeeper:housekeeper)
"Housekeeper launders the beds.":
    tags: employment;
    location: boarding_house(Housekeeper).
    
action boarder_lounge(>Boarder:boarder)
"Boarder lounges in their room.":
    location: boarding_house(Boarder).
    
action boarding_house_visitor(>Visitor:visitor)
"Visitor visits the boarding house.":
    location: boarding_house(Visitor).
    
//TOWN SQUARE
action loiterer(>Loiterer)
"Loiterer loiters.":
    location: town_square(Loiterer).
    
//SCHOOL
action student_learning(>Student:student)
"Student learns.":
    location: school(Student).
    
action headmaster_teaches(>Headmaster:headmaster)
"Headmaster teaches.":
    tags: employment;
    location: school(Headmaster).
    
//BOOKSTORE
action bookstore_owner(>Owner:owner)
"Owner orders books.":
    tags: employment;
    location: bookstore(Owner).
    
action bookstore_clerk(>Clerk:clerk)
"Clerk stocks shelves.":
    tags: employment;
    location: bookstore(Clerk).
    
action bookstore_regular(>Regular:regular)
"Regular requests a special order.":
    location: bookstore(Regular).
    
action bookstore_customer(>Customer:customer)
"Customer browses the books.":
    location: bookstore(Customer).
    
//WHARF
action wharf_work(>Worker:dockworker)
"Worker unloads cargo.":
    tags: employment;
    location: wharf(Worker).
    
action fish(>Fisherman:fisherman)
"Fisherman fishes.":
    location: wharf(Fisherman).
    
action sailor_loiter(>Sailor:sailor)
"Sailor lounges aboard.":
    location: wharf(Sailor).
    
action wharf_loiter(>Loiterer)
"Loiterer looks out over the sea.":
    location: wharf(Loiterer).
    
//WAREHOUSE
action warehouse_owner(>Owner:owner)
"Owner balances the accounts.":
    tags: employment;
    location: warehouse(Owner).
    
action warehouse_union_rep(>Union:unionrep)
"Union organizes the workers.":
    tags: employment;
    location: warehouse(Union).
    
action warehouse_foreman(>Foreman:foreman)
"Foreman oversees the workers.":
    tags: employment;
    location: warehouse(Foreman).
    
action warehouse_worker(>Worker:worker)
"Worker labours.":
    tags: employment;
    location: warehouse(Worker).
    
//BAR
action bar_generic(>Self)
"Self drinks.":
    location: bar(Self).

///////////////////////////////////////////////////////////////
//  STATUS
//////////////////////////////////////////////////////////////
 
status scalar likes/like/liked(>Self,<Other):.

/////////////////////////////////////////////////////////////
//  TRAITS
/////////////////////////////////////////////////////////////

trait gregarious(>Self) opposes narcissistic:
    +++(gregarious).
    
trait narcissistic(>Self) opposes gregarious:
    +++(narcissistic).
    
trait traditionalist(>Self) opposes reformist:
    +++(traditionalist).
    
trait reformist (>Self):
    +++(reformist).

trait skeptic(>Self) opposes believer:
    +++(skeptic).
    
trait believer (>Self):
    +++(believer).
    

default trait workers_go_to_work(>Self,@Location):
    ++++++@if Self is employee of Location@.       

